{"ast":null,"code":"import { sortTransformProps } from './transform.js';\nimport { zeroLayout } from '../../utils/state.js';\nvar translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(_a, _b, transformIsDefault, transformTemplate) {\n  var transform = _a.transform,\n    transformKeys = _a.transformKeys;\n  var _c = _b.enableHardwareAcceleration,\n    enableHardwareAcceleration = _c === void 0 ? true : _c,\n    _d = _b.allowTransformNone,\n    allowTransformNone = _d === void 0 ? true : _d;\n  // The transform string we're going to build into.\n  var transformString = \"\";\n  // Transform keys into their default order - this will determine the output order.\n  transformKeys.sort(sortTransformProps);\n  // Track whether the defined transform has a defined z so we don't add a\n  // second to enable hardware acceleration\n  var transformHasZ = false;\n  // Loop over each transform and build them into transformString\n  var numTransformKeys = transformKeys.length;\n  for (var i = 0; i < numTransformKeys; i++) {\n    var key = transformKeys[i];\n    transformString += (translateAlias[key] || key) + \"(\" + transform[key] + \") \";\n    if (key === \"z\") transformHasZ = true;\n  }\n  if (!transformHasZ && enableHardwareAcceleration) {\n    transformString += \"translateZ(0)\";\n  } else {\n    transformString = transformString.trim();\n  }\n  // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (allowTransformNone && transformIsDefault) {\n    transformString = \"none\";\n  }\n  return transformString;\n}\n/**\n * Build a transformOrigin style. Uses the same defaults as the browser for\n * undefined origins.\n */\nfunction buildTransformOrigin(_a) {\n  var _b = _a.originX,\n    originX = _b === void 0 ? \"50%\" : _b,\n    _c = _a.originY,\n    originY = _c === void 0 ? \"50%\" : _c,\n    _d = _a.originZ,\n    originZ = _d === void 0 ? 0 : _d;\n  return originX + \" \" + originY + \" \" + originZ;\n}\n/**\n * Build a transform style that takes a calculated delta between the element's current\n * space on screen and projects it into the desired space.\n */\nfunction buildLayoutProjectionTransform(_a, treeScale, latestTransform) {\n  var x = _a.x,\n    y = _a.y;\n  /**\n   * The translations we use to calculate are always relative to the viewport coordinate space.\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n   */\n  var xTranslate = x.translate / treeScale.x;\n  var yTranslate = y.translate / treeScale.y;\n  var transform = \"translate3d(\" + xTranslate + \"px, \" + yTranslate + \"px, 0) \";\n  if (latestTransform) {\n    var rotate = latestTransform.rotate,\n      rotateX = latestTransform.rotateX,\n      rotateY = latestTransform.rotateY;\n    if (rotate) transform += \"rotate(\" + rotate + \") \";\n    if (rotateX) transform += \"rotateX(\" + rotateX + \") \";\n    if (rotateY) transform += \"rotateY(\" + rotateY + \") \";\n  }\n  transform += \"scale(\" + x.scale + \", \" + y.scale + \")\";\n  return !latestTransform && transform === identityProjection ? \"\" : transform;\n}\n/**\n * Take the calculated delta origin and apply it as a transform string.\n */\nfunction buildLayoutProjectionTransformOrigin(_a) {\n  var deltaFinal = _a.deltaFinal;\n  return deltaFinal.x.origin * 100 + \"% \" + deltaFinal.y.origin * 100 + \"% 0\";\n}\nvar identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, {\n  x: 1,\n  y: 1\n});\nexport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, buildTransform, buildTransformOrigin, identityProjection };","map":{"version":3,"names":["sortTransformProps","zeroLayout","translateAlias","x","y","z","transformPerspective","buildTransform","_a","_b","transformIsDefault","transformTemplate","transform","transformKeys","_c","enableHardwareAcceleration","_d","allowTransformNone","transformString","sort","transformHasZ","numTransformKeys","length","i","key","trim","buildTransformOrigin","originX","originY","originZ","buildLayoutProjectionTransform","treeScale","latestTransform","xTranslate","translate","yTranslate","rotate","rotateX","rotateY","scale","identityProjection","buildLayoutProjectionTransformOrigin","deltaFinal","origin","delta"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/framer-motion/dist/es/render/html/utils/build-transform.js"],"sourcesContent":["import { sortTransformProps } from './transform.js';\nimport { zeroLayout } from '../../utils/state.js';\n\nvar translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(_a, _b, transformIsDefault, transformTemplate) {\n    var transform = _a.transform, transformKeys = _a.transformKeys;\n    var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;\n    // The transform string we're going to build into.\n    var transformString = \"\";\n    // Transform keys into their default order - this will determine the output order.\n    transformKeys.sort(sortTransformProps);\n    // Track whether the defined transform has a defined z so we don't add a\n    // second to enable hardware acceleration\n    var transformHasZ = false;\n    // Loop over each transform and build them into transformString\n    var numTransformKeys = transformKeys.length;\n    for (var i = 0; i < numTransformKeys; i++) {\n        var key = transformKeys[i];\n        transformString += (translateAlias[key] || key) + \"(\" + transform[key] + \") \";\n        if (key === \"z\")\n            transformHasZ = true;\n    }\n    if (!transformHasZ && enableHardwareAcceleration) {\n        transformString += \"translateZ(0)\";\n    }\n    else {\n        transformString = transformString.trim();\n    }\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n/**\n * Build a transformOrigin style. Uses the same defaults as the browser for\n * undefined origins.\n */\nfunction buildTransformOrigin(_a) {\n    var _b = _a.originX, originX = _b === void 0 ? \"50%\" : _b, _c = _a.originY, originY = _c === void 0 ? \"50%\" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;\n    return originX + \" \" + originY + \" \" + originZ;\n}\n/**\n * Build a transform style that takes a calculated delta between the element's current\n * space on screen and projects it into the desired space.\n */\nfunction buildLayoutProjectionTransform(_a, treeScale, latestTransform) {\n    var x = _a.x, y = _a.y;\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = x.translate / treeScale.x;\n    var yTranslate = y.translate / treeScale.y;\n    var transform = \"translate3d(\" + xTranslate + \"px, \" + yTranslate + \"px, 0) \";\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate)\n            transform += \"rotate(\" + rotate + \") \";\n        if (rotateX)\n            transform += \"rotateX(\" + rotateX + \") \";\n        if (rotateY)\n            transform += \"rotateY(\" + rotateY + \") \";\n    }\n    transform += \"scale(\" + x.scale + \", \" + y.scale + \")\";\n    return !latestTransform && transform === identityProjection ? \"\" : transform;\n}\n/**\n * Take the calculated delta origin and apply it as a transform string.\n */\nfunction buildLayoutProjectionTransformOrigin(_a) {\n    var deltaFinal = _a.deltaFinal;\n    return deltaFinal.x.origin * 100 + \"% \" + deltaFinal.y.origin * 100 + \"% 0\";\n}\nvar identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });\n\nexport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, buildTransform, buildTransformOrigin, identityProjection };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,gBAAgB;AACnD,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,IAAIC,cAAc,GAAG;EACjBC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,oBAAoB,EAAE;AAC1B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,EAAE,EAAEC,EAAE,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAE;EACnE,IAAIC,SAAS,GAAGJ,EAAE,CAACI,SAAS;IAAEC,aAAa,GAAGL,EAAE,CAACK,aAAa;EAC9D,IAAIC,EAAE,GAAGL,EAAE,CAACM,0BAA0B;IAAEA,0BAA0B,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,EAAE;IAAEE,EAAE,GAAGP,EAAE,CAACQ,kBAAkB;IAAEA,kBAAkB,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,EAAE;EAC1K;EACA,IAAIE,eAAe,GAAG,EAAE;EACxB;EACAL,aAAa,CAACM,IAAI,CAACnB,kBAAkB,CAAC;EACtC;EACA;EACA,IAAIoB,aAAa,GAAG,KAAK;EACzB;EACA,IAAIC,gBAAgB,GAAGR,aAAa,CAACS,MAAM;EAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,gBAAgB,EAAEE,CAAC,EAAE,EAAE;IACvC,IAAIC,GAAG,GAAGX,aAAa,CAACU,CAAC,CAAC;IAC1BL,eAAe,IAAI,CAAChB,cAAc,CAACsB,GAAG,CAAC,IAAIA,GAAG,IAAI,GAAG,GAAGZ,SAAS,CAACY,GAAG,CAAC,GAAG,IAAI;IAC7E,IAAIA,GAAG,KAAK,GAAG,EACXJ,aAAa,GAAG,IAAI;EAC5B;EACA,IAAI,CAACA,aAAa,IAAIL,0BAA0B,EAAE;IAC9CG,eAAe,IAAI,eAAe;EACtC,CAAC,MACI;IACDA,eAAe,GAAGA,eAAe,CAACO,IAAI,EAAE;EAC5C;EACA;EACA;EACA,IAAId,iBAAiB,EAAE;IACnBO,eAAe,GAAGP,iBAAiB,CAACC,SAAS,EAAEF,kBAAkB,GAAG,EAAE,GAAGQ,eAAe,CAAC;EAC7F,CAAC,MACI,IAAID,kBAAkB,IAAIP,kBAAkB,EAAE;IAC/CQ,eAAe,GAAG,MAAM;EAC5B;EACA,OAAOA,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA,SAASQ,oBAAoB,CAAClB,EAAE,EAAE;EAC9B,IAAIC,EAAE,GAAGD,EAAE,CAACmB,OAAO;IAAEA,OAAO,GAAGlB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;IAAEK,EAAE,GAAGN,EAAE,CAACoB,OAAO;IAAEA,OAAO,GAAGd,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;IAAEE,EAAE,GAAGR,EAAE,CAACqB,OAAO;IAAEA,OAAO,GAAGb,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGA,EAAE;EACnK,OAAOW,OAAO,GAAG,GAAG,GAAGC,OAAO,GAAG,GAAG,GAAGC,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA,SAASC,8BAA8B,CAACtB,EAAE,EAAEuB,SAAS,EAAEC,eAAe,EAAE;EACpE,IAAI7B,CAAC,GAAGK,EAAE,CAACL,CAAC;IAAEC,CAAC,GAAGI,EAAE,CAACJ,CAAC;EACtB;AACJ;AACA;AACA;AACA;AACA;EACI,IAAI6B,UAAU,GAAG9B,CAAC,CAAC+B,SAAS,GAAGH,SAAS,CAAC5B,CAAC;EAC1C,IAAIgC,UAAU,GAAG/B,CAAC,CAAC8B,SAAS,GAAGH,SAAS,CAAC3B,CAAC;EAC1C,IAAIQ,SAAS,GAAG,cAAc,GAAGqB,UAAU,GAAG,MAAM,GAAGE,UAAU,GAAG,SAAS;EAC7E,IAAIH,eAAe,EAAE;IACjB,IAAII,MAAM,GAAGJ,eAAe,CAACI,MAAM;MAAEC,OAAO,GAAGL,eAAe,CAACK,OAAO;MAAEC,OAAO,GAAGN,eAAe,CAACM,OAAO;IACzG,IAAIF,MAAM,EACNxB,SAAS,IAAI,SAAS,GAAGwB,MAAM,GAAG,IAAI;IAC1C,IAAIC,OAAO,EACPzB,SAAS,IAAI,UAAU,GAAGyB,OAAO,GAAG,IAAI;IAC5C,IAAIC,OAAO,EACP1B,SAAS,IAAI,UAAU,GAAG0B,OAAO,GAAG,IAAI;EAChD;EACA1B,SAAS,IAAI,QAAQ,GAAGT,CAAC,CAACoC,KAAK,GAAG,IAAI,GAAGnC,CAAC,CAACmC,KAAK,GAAG,GAAG;EACtD,OAAO,CAACP,eAAe,IAAIpB,SAAS,KAAK4B,kBAAkB,GAAG,EAAE,GAAG5B,SAAS;AAChF;AACA;AACA;AACA;AACA,SAAS6B,oCAAoC,CAACjC,EAAE,EAAE;EAC9C,IAAIkC,UAAU,GAAGlC,EAAE,CAACkC,UAAU;EAC9B,OAAOA,UAAU,CAACvC,CAAC,CAACwC,MAAM,GAAG,GAAG,GAAG,IAAI,GAAGD,UAAU,CAACtC,CAAC,CAACuC,MAAM,GAAG,GAAG,GAAG,KAAK;AAC/E;AACA,IAAIH,kBAAkB,GAAGV,8BAA8B,CAAC7B,UAAU,CAAC2C,KAAK,EAAE3C,UAAU,CAAC8B,SAAS,EAAE;EAAE5B,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE;AAAE,CAAC,CAAC;AAE/G,SAAS0B,8BAA8B,EAAEW,oCAAoC,EAAElC,cAAc,EAAEmB,oBAAoB,EAAEc,kBAAkB"},"metadata":{},"sourceType":"module"}