{"ast":null,"code":"import { useContext, useRef, useMemo } from 'react';\nimport { __assign } from 'tslib';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { animate } from 'popmotion';\nimport { isMotionValue } from './utils/is-motion-value.js';\nimport { useMotionValue } from './use-motion-value.js';\nimport { useOnChange } from './use-on-change.js';\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config) {\n  if (config === void 0) {\n    config = {};\n  }\n  var isStatic = useContext(MotionConfigContext).isStatic;\n  var activeSpringAnimation = useRef(null);\n  var value = useMotionValue(isMotionValue(source) ? source.get() : source);\n  useMemo(function () {\n    return value.attach(function (v, set) {\n      /**\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n       * at that level, but this will work for now\n       */\n      if (isStatic) return set(v);\n      if (activeSpringAnimation.current) {\n        activeSpringAnimation.current.stop();\n      }\n      activeSpringAnimation.current = animate(__assign(__assign({\n        from: value.get(),\n        to: v,\n        velocity: value.getVelocity()\n      }, config), {\n        onUpdate: set\n      }));\n      return value.get();\n    });\n  }, Object.values(config));\n  useOnChange(source, function (v) {\n    return value.set(parseFloat(v));\n  });\n  return value;\n}\nexport { useSpring };","map":{"version":3,"names":["useContext","useRef","useMemo","__assign","MotionConfigContext","animate","isMotionValue","useMotionValue","useOnChange","useSpring","source","config","isStatic","activeSpringAnimation","value","get","attach","v","set","current","stop","from","to","velocity","getVelocity","onUpdate","Object","values","parseFloat"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/framer-motion/dist/es/value/use-spring.js"],"sourcesContent":["import { useContext, useRef, useMemo } from 'react';\nimport { __assign } from 'tslib';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { animate } from 'popmotion';\nimport { isMotionValue } from './utils/is-motion-value.js';\nimport { useMotionValue } from './use-motion-value.js';\nimport { useOnChange } from './use-on-change.js';\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config) {\n    if (config === void 0) { config = {}; }\n    var isStatic = useContext(MotionConfigContext).isStatic;\n    var activeSpringAnimation = useRef(null);\n    var value = useMotionValue(isMotionValue(source) ? source.get() : source);\n    useMemo(function () {\n        return value.attach(function (v, set) {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            if (activeSpringAnimation.current) {\n                activeSpringAnimation.current.stop();\n            }\n            activeSpringAnimation.current = animate(__assign(__assign({ from: value.get(), to: v, velocity: value.getVelocity() }, config), { onUpdate: set }));\n            return value.get();\n        });\n    }, Object.values(config));\n    useOnChange(source, function (v) { return value.set(parseFloat(v)); });\n    return value;\n}\n\nexport { useSpring };\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,OAAO,QAAQ,OAAO;AACnD,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,mBAAmB,QAAQ,mCAAmC;AACvE,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,WAAW,QAAQ,oBAAoB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,MAAM,EAAEC,MAAM,EAAE;EAC/B,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAG,CAAC,CAAC;EAAE;EACtC,IAAIC,QAAQ,GAAGZ,UAAU,CAACI,mBAAmB,CAAC,CAACQ,QAAQ;EACvD,IAAIC,qBAAqB,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACxC,IAAIa,KAAK,GAAGP,cAAc,CAACD,aAAa,CAACI,MAAM,CAAC,GAAGA,MAAM,CAACK,GAAG,EAAE,GAAGL,MAAM,CAAC;EACzER,OAAO,CAAC,YAAY;IAChB,OAAOY,KAAK,CAACE,MAAM,CAAC,UAAUC,CAAC,EAAEC,GAAG,EAAE;MAClC;AACZ;AACA;AACA;MACY,IAAIN,QAAQ,EACR,OAAOM,GAAG,CAACD,CAAC,CAAC;MACjB,IAAIJ,qBAAqB,CAACM,OAAO,EAAE;QAC/BN,qBAAqB,CAACM,OAAO,CAACC,IAAI,EAAE;MACxC;MACAP,qBAAqB,CAACM,OAAO,GAAGd,OAAO,CAACF,QAAQ,CAACA,QAAQ,CAAC;QAAEkB,IAAI,EAAEP,KAAK,CAACC,GAAG,EAAE;QAAEO,EAAE,EAAEL,CAAC;QAAEM,QAAQ,EAAET,KAAK,CAACU,WAAW;MAAG,CAAC,EAAEb,MAAM,CAAC,EAAE;QAAEc,QAAQ,EAAEP;MAAI,CAAC,CAAC,CAAC;MACnJ,OAAOJ,KAAK,CAACC,GAAG,EAAE;IACtB,CAAC,CAAC;EACN,CAAC,EAAEW,MAAM,CAACC,MAAM,CAAChB,MAAM,CAAC,CAAC;EACzBH,WAAW,CAACE,MAAM,EAAE,UAAUO,CAAC,EAAE;IAAE,OAAOH,KAAK,CAACI,GAAG,CAACU,UAAU,CAACX,CAAC,CAAC,CAAC;EAAE,CAAC,CAAC;EACtE,OAAOH,KAAK;AAChB;AAEA,SAASL,SAAS"},"metadata":{},"sourceType":"module"}