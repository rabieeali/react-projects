{"ast":null,"code":"import { __assign, __spread } from 'tslib';\nimport { number, color, complex, filter, px, degrees, scale, alpha, progressPercentage, percent, vw, vh } from 'style-value-types';\n\n/**\n * ValueType for \"auto\"\n */\nvar auto = {\n  test: function (v) {\n    return v === \"auto\";\n  },\n  parse: function (v) {\n    return v;\n  }\n};\n/**\n * ValueType for ints\n */\nvar int = __assign(__assign({}, number), {\n  transform: Math.round\n});\n/**\n * A map of default value types for common values\n */\nvar defaultValueTypes = {\n  // Color props\n  color: color,\n  backgroundColor: color,\n  outlineColor: color,\n  fill: color,\n  stroke: color,\n  // Border props\n  borderColor: color,\n  borderTopColor: color,\n  borderRightColor: color,\n  borderBottomColor: color,\n  borderLeftColor: color,\n  borderWidth: px,\n  borderTopWidth: px,\n  borderRightWidth: px,\n  borderBottomWidth: px,\n  borderLeftWidth: px,\n  borderRadius: px,\n  radius: px,\n  borderTopLeftRadius: px,\n  borderTopRightRadius: px,\n  borderBottomRightRadius: px,\n  borderBottomLeftRadius: px,\n  // Positioning props\n  width: px,\n  maxWidth: px,\n  height: px,\n  maxHeight: px,\n  size: px,\n  top: px,\n  right: px,\n  bottom: px,\n  left: px,\n  // Spacing props\n  padding: px,\n  paddingTop: px,\n  paddingRight: px,\n  paddingBottom: px,\n  paddingLeft: px,\n  margin: px,\n  marginTop: px,\n  marginRight: px,\n  marginBottom: px,\n  marginLeft: px,\n  // Transform props\n  rotate: degrees,\n  rotateX: degrees,\n  rotateY: degrees,\n  rotateZ: degrees,\n  scale: scale,\n  scaleX: scale,\n  scaleY: scale,\n  scaleZ: scale,\n  skew: degrees,\n  skewX: degrees,\n  skewY: degrees,\n  distance: px,\n  translateX: px,\n  translateY: px,\n  translateZ: px,\n  x: px,\n  y: px,\n  z: px,\n  perspective: px,\n  transformPerspective: px,\n  opacity: alpha,\n  originX: progressPercentage,\n  originY: progressPercentage,\n  originZ: px,\n  // Misc\n  zIndex: int,\n  filter: filter,\n  WebkitFilter: filter,\n  // SVG\n  fillOpacity: alpha,\n  strokeOpacity: alpha,\n  numOctaves: int\n};\n/**\n * A list of value types commonly used for dimensions\n */\nvar dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a provided value against a ValueType\n */\nvar testValueType = function (v) {\n  return function (type) {\n    return type.test(v);\n  };\n};\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nvar findDimensionValueType = function (v) {\n  return dimensionValueTypes.find(testValueType(v));\n};\n/**\n * A list of all ValueTypes\n */\nvar valueTypes = __spread(dimensionValueTypes, [color, complex]);\n/**\n * Tests a value against the list of ValueTypes\n */\nvar findValueType = function (v) {\n  return valueTypes.find(testValueType(v));\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nvar getDefaultValueType = function (key) {\n  return defaultValueTypes[key];\n};\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nvar getValueAsType = function (value, type) {\n  return type && typeof value === \"number\" ? type.transform(value) : value;\n};\nfunction getAnimatableNone(key, value) {\n  var _a;\n  var defaultValueType = getDefaultValueType(key);\n  if (defaultValueType !== filter) defaultValueType = complex;\n  // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n  return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);\n}\nexport { auto, findDimensionValueType, findValueType, getAnimatableNone, getDefaultValueType, getValueAsType };","map":{"version":3,"names":["__assign","__spread","number","color","complex","filter","px","degrees","scale","alpha","progressPercentage","percent","vw","vh","auto","test","v","parse","int","transform","Math","round","defaultValueTypes","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","width","maxWidth","height","maxHeight","size","top","right","bottom","left","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","x","y","z","perspective","transformPerspective","opacity","originX","originY","originZ","zIndex","WebkitFilter","fillOpacity","strokeOpacity","numOctaves","dimensionValueTypes","testValueType","type","findDimensionValueType","find","valueTypes","findValueType","getDefaultValueType","key","getValueAsType","value","getAnimatableNone","_a","defaultValueType","call"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/framer-motion/dist/es/render/dom/utils/value-types.js"],"sourcesContent":["import { __assign, __spread } from 'tslib';\nimport { number, color, complex, filter, px, degrees, scale, alpha, progressPercentage, percent, vw, vh } from 'style-value-types';\n\n/**\n * ValueType for \"auto\"\n */\nvar auto = {\n    test: function (v) { return v === \"auto\"; },\n    parse: function (v) { return v; },\n};\n/**\n * ValueType for ints\n */\nvar int = __assign(__assign({}, number), { transform: Math.round });\n/**\n * A map of default value types for common values\n */\nvar defaultValueTypes = {\n    // Color props\n    color: color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale: scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    filter: filter,\n    WebkitFilter: filter,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n/**\n * A list of value types commonly used for dimensions\n */\nvar dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a provided value against a ValueType\n */\nvar testValueType = function (v) { return function (type) { return type.test(v); }; };\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nvar findDimensionValueType = function (v) {\n    return dimensionValueTypes.find(testValueType(v));\n};\n/**\n * A list of all ValueTypes\n */\nvar valueTypes = __spread(dimensionValueTypes, [color, complex]);\n/**\n * Tests a value against the list of ValueTypes\n */\nvar findValueType = function (v) { return valueTypes.find(testValueType(v)); };\n/**\n * Gets the default ValueType for the provided value key\n */\nvar getDefaultValueType = function (key) { return defaultValueTypes[key]; };\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nvar getValueAsType = function (value, type) {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\nfunction getAnimatableNone(key, value) {\n    var _a;\n    var defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);\n}\n\nexport { auto, findDimensionValueType, findValueType, getAnimatableNone, getDefaultValueType, getValueAsType };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}