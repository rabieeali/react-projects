{"ast":null,"code":"import { px } from 'style-value-types';\n\n// Convert a progress 0-1 to a pixels value based on the provided length\nvar progressToPixels = function (progress, length) {\n  return px.transform(progress * length);\n};\nvar dashKeys = {\n  offset: \"stroke-dashoffset\",\n  array: \"stroke-dasharray\"\n};\nvar camelKeys = {\n  offset: \"strokeDashoffset\",\n  array: \"strokeDasharray\"\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, totalLength, length, spacing, offset, useDashCase) {\n  if (spacing === void 0) {\n    spacing = 1;\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  if (useDashCase === void 0) {\n    useDashCase = true;\n  }\n  // We use dash case when setting attributes directly to the DOM node and camel case\n  // when defining props on a React component.\n  var keys = useDashCase ? dashKeys : camelKeys;\n  // Build the dash offset\n  attrs[keys.offset] = progressToPixels(-offset, totalLength);\n  // Build the dash array\n  var pathLength = progressToPixels(length, totalLength);\n  var pathSpacing = progressToPixels(spacing, totalLength);\n  attrs[keys.array] = pathLength + \" \" + pathSpacing;\n}\nexport { buildSVGPath };","map":{"version":3,"names":["px","progressToPixels","progress","length","transform","dashKeys","offset","array","camelKeys","buildSVGPath","attrs","totalLength","spacing","useDashCase","keys","pathLength","pathSpacing"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/framer-motion/dist/es/render/svg/utils/path.js"],"sourcesContent":["import { px } from 'style-value-types';\n\n// Convert a progress 0-1 to a pixels value based on the provided length\nvar progressToPixels = function (progress, length) {\n    return px.transform(progress * length);\n};\nvar dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nvar camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, totalLength, length, spacing, offset, useDashCase) {\n    if (spacing === void 0) { spacing = 1; }\n    if (offset === void 0) { offset = 0; }\n    if (useDashCase === void 0) { useDashCase = true; }\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    var keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = progressToPixels(-offset, totalLength);\n    // Build the dash array\n    var pathLength = progressToPixels(length, totalLength);\n    var pathSpacing = progressToPixels(spacing, totalLength);\n    attrs[keys.array] = pathLength + \" \" + pathSpacing;\n}\n\nexport { buildSVGPath };\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,mBAAmB;;AAEtC;AACA,IAAIC,gBAAgB,GAAG,UAAUC,QAAQ,EAAEC,MAAM,EAAE;EAC/C,OAAOH,EAAE,CAACI,SAAS,CAACF,QAAQ,GAAGC,MAAM,CAAC;AAC1C,CAAC;AACD,IAAIE,QAAQ,GAAG;EACXC,MAAM,EAAE,mBAAmB;EAC3BC,KAAK,EAAE;AACX,CAAC;AACD,IAAIC,SAAS,GAAG;EACZF,MAAM,EAAE,kBAAkB;EAC1BC,KAAK,EAAE;AACX,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,YAAY,CAACC,KAAK,EAAEC,WAAW,EAAER,MAAM,EAAES,OAAO,EAAEN,MAAM,EAAEO,WAAW,EAAE;EAC5E,IAAID,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC;EAAE;EACvC,IAAIN,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAG,CAAC;EAAE;EACrC,IAAIO,WAAW,KAAK,KAAK,CAAC,EAAE;IAAEA,WAAW,GAAG,IAAI;EAAE;EAClD;EACA;EACA,IAAIC,IAAI,GAAGD,WAAW,GAAGR,QAAQ,GAAGG,SAAS;EAC7C;EACAE,KAAK,CAACI,IAAI,CAACR,MAAM,CAAC,GAAGL,gBAAgB,CAAC,CAACK,MAAM,EAAEK,WAAW,CAAC;EAC3D;EACA,IAAII,UAAU,GAAGd,gBAAgB,CAACE,MAAM,EAAEQ,WAAW,CAAC;EACtD,IAAIK,WAAW,GAAGf,gBAAgB,CAACW,OAAO,EAAED,WAAW,CAAC;EACxDD,KAAK,CAACI,IAAI,CAACP,KAAK,CAAC,GAAGQ,UAAU,GAAG,GAAG,GAAGC,WAAW;AACtD;AAEA,SAASP,YAAY"},"metadata":{},"sourceType":"module"}