{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport removeAccents from 'remove-accents';\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nmatchSorter.rankings = rankings;\nvar defaultBaseSortFn = function defaultBaseSortFn(a, b) {\n  return String(a.rankedValue).localeCompare(String(b.rankedValue));\n};\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\n\nfunction matchSorter(items, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    keys = _options.keys,\n    _options$threshold = _options.threshold,\n    threshold = _options$threshold === void 0 ? rankings.MATCHES : _options$threshold,\n    _options$baseSort = _options.baseSort,\n    baseSort = _options$baseSort === void 0 ? defaultBaseSortFn : _options$baseSort,\n    _options$sorter = _options.sorter,\n    sorter = _options$sorter === void 0 ? function (matchedItems) {\n      return matchedItems.sort(function (a, b) {\n        return sortRankedValues(a, b, baseSort);\n      });\n    } : _options$sorter;\n  var matchedItems = items.reduce(reduceItemsToRanked, []);\n  return sorter(matchedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n  function reduceItemsToRanked(matches, item, index) {\n    var rankingInfo = getHighestRanking(item, keys, value, options);\n    var rank = rankingInfo.rank,\n      _rankingInfo$keyThres = rankingInfo.keyThreshold,\n      keyThreshold = _rankingInfo$keyThres === void 0 ? threshold : _rankingInfo$keyThres;\n    if (rank >= keyThreshold) {\n      matches.push(_extends({}, rankingInfo, {\n        item: item,\n        index: index\n      }));\n    }\n    return matches;\n  }\n}\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\n\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    var stringItem = item;\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: stringItem,\n      rank: getMatchRanking(stringItem, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n      rankedValue = _ref2.rankedValue,\n      keyIndex = _ref2.keyIndex,\n      keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n      attributes = _ref3.attributes;\n    var newRank = getMatchRanking(itemValue, value, options);\n    var newRankedValue = rankedValue;\n    var minRanking = attributes.minRanking,\n      maxRanking = attributes.maxRanking,\n      threshold = attributes.threshold;\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n      newRankedValue = itemValue;\n    }\n    return {\n      rankedValue: newRankedValue,\n      rank: rank,\n      keyIndex: keyIndex,\n      keyThreshold: keyThreshold\n    };\n  }, {\n    rankedValue: item,\n    rank: rankings.NO_MATCH,\n    keyIndex: -1,\n    keyThreshold: options.threshold\n  });\n}\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\n\nfunction getMatchRanking(testString, stringToRank, options) {\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\n\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  } // case sensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  } // Lower casing before further comparison\n\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.EQUAL;\n  } // starts with\n\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH;\n  } // word starts with\n\n  if (testString.includes(\" \" + stringToRank)) {\n    return rankings.WORD_STARTS_WITH;\n  } // contains\n\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  } // acronym\n\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM;\n  } // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n\n  return getClosenessRanking(testString, stringToRank);\n}\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\n\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\n\nfunction getClosenessRanking(testString, stringToRank) {\n  var matchingInOrderCharCount = 0;\n  var charNumber = 0;\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index, J = string.length; j < J; j++) {\n      var stringChar = string[j];\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1;\n        return j + 1;\n      }\n    }\n    return -1;\n  }\n  function getRanking(spread) {\n    var spreadPercentage = 1 / spread;\n    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n    var ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n    return ranking;\n  }\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n  charNumber = firstIndex;\n  for (var i = 1, I = stringToRank.length; i < I; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\n\nfunction sortRankedValues(a, b, baseSort) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n    aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n    bKeyIndex = b.keyIndex;\n  var same = aRank === bRank;\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      // use the base sort function as a tie-breaker\n      return baseSort(a, b);\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\n\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n  // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = \"\" + value; // toString\n\n  if (!keepDiacritics) {\n    value = removeAccents(value);\n  }\n  return value;\n}\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\n\nfunction getItemValues(item, key) {\n  if (typeof key === 'object') {\n    key = key.key;\n  }\n  var value;\n  if (typeof key === 'function') {\n    value = key(item);\n  } else if (item == null) {\n    value = null;\n  } else if (Object.hasOwnProperty.call(item, key)) {\n    value = item[key];\n  } else if (key.includes('.')) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return getNestedValues(key, item);\n  } else {\n    value = null;\n  } // because `value` can also be undefined\n\n  if (value == null) {\n    return [];\n  }\n  if (Array.isArray(value)) {\n    return value;\n  }\n  return [String(value)];\n}\n/**\n * Given path: \"foo.bar.baz\"\n * And item: {foo: {bar: {baz: 'buzz'}}}\n *   -> 'buzz'\n * @param path a dot-separated set of keys\n * @param item the item to get the value from\n */\n\nfunction getNestedValues(path, item) {\n  var keys = path.split('.');\n  var values = [item];\n  for (var i = 0, I = keys.length; i < I; i++) {\n    var nestedKey = keys[i];\n    var nestedValues = [];\n    for (var j = 0, J = values.length; j < J; j++) {\n      var nestedItem = values[j];\n      if (nestedItem == null) continue;\n      if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {\n        var nestedValue = nestedItem[nestedKey];\n        if (nestedValue != null) {\n          nestedValues.push(nestedValue);\n        }\n      } else if (nestedKey === '*') {\n        // ensure that values is an array\n        nestedValues = nestedValues.concat(nestedItem);\n      }\n    }\n    values = nestedValues;\n  }\n  if (Array.isArray(values[0])) {\n    // keep allowing the implicit wildcard for an array of strings at the end of\n    // the path; don't use `.flat()` because that's not available in node.js v10\n    var result = [];\n    return result.concat.apply(result, values);\n  } // Based on our logic it should be an array of strings by now...\n  // assuming the user's path terminated in strings\n\n  return values;\n}\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\n\nfunction getAllValuesToRank(item, keys) {\n  var allValues = [];\n  for (var j = 0, J = keys.length; j < J; j++) {\n    var key = keys[j];\n    var attributes = getKeyAttributes(key);\n    var itemValues = getItemValues(item, key);\n    for (var i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i],\n        attributes: attributes\n      });\n    }\n  }\n  return allValues;\n}\nvar defaultKeyAttributes = {\n  maxRanking: Infinity,\n  minRanking: -Infinity\n};\n/**\n * Gets all the attributes for the given key\n * @param key - the key from which the attributes will be retrieved\n * @return object containing the key's attributes\n */\n\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    return defaultKeyAttributes;\n  }\n  return _extends({}, defaultKeyAttributes, key);\n}\n/*\neslint\n  no-continue: \"off\",\n*/\n\nexport { defaultBaseSortFn, matchSorter, rankings };","map":{"version":3,"names":["_extends","removeAccents","rankings","CASE_SENSITIVE_EQUAL","EQUAL","STARTS_WITH","WORD_STARTS_WITH","CONTAINS","ACRONYM","MATCHES","NO_MATCH","matchSorter","defaultBaseSortFn","a","b","String","rankedValue","localeCompare","items","value","options","_options","keys","_options$threshold","threshold","_options$baseSort","baseSort","_options$sorter","sorter","matchedItems","sort","sortRankedValues","reduce","reduceItemsToRanked","map","_ref","item","matches","index","rankingInfo","getHighestRanking","rank","_rankingInfo$keyThres","keyThreshold","push","stringItem","getMatchRanking","keyIndex","valuesToRank","getAllValuesToRank","_ref2","_ref3","i","itemValue","attributes","newRank","newRankedValue","minRanking","maxRanking","testString","stringToRank","prepareValueForComparison","length","toLowerCase","startsWith","includes","getAcronym","getClosenessRanking","string","acronym","wordsInString","split","forEach","wordInString","splitByHyphenWords","splitByHyphenWord","substr","matchingInOrderCharCount","charNumber","findMatchingCharacter","matchChar","j","J","stringChar","getRanking","spread","spreadPercentage","inOrderPercentage","ranking","firstIndex","I","found","aFirst","bFirst","aRank","aKeyIndex","bRank","bKeyIndex","same","_ref4","keepDiacritics","getItemValues","key","Object","hasOwnProperty","call","getNestedValues","Array","isArray","path","values","nestedKey","nestedValues","nestedItem","nestedValue","concat","result","apply","allValues","getKeyAttributes","itemValues","defaultKeyAttributes","Infinity"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/match-sorter/dist/match-sorter.esm.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport removeAccents from 'remove-accents';\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nmatchSorter.rankings = rankings;\n\nvar defaultBaseSortFn = function defaultBaseSortFn(a, b) {\n  return String(a.rankedValue).localeCompare(String(b.rankedValue));\n};\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\n\n\nfunction matchSorter(items, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      keys = _options.keys,\n      _options$threshold = _options.threshold,\n      threshold = _options$threshold === void 0 ? rankings.MATCHES : _options$threshold,\n      _options$baseSort = _options.baseSort,\n      baseSort = _options$baseSort === void 0 ? defaultBaseSortFn : _options$baseSort,\n      _options$sorter = _options.sorter,\n      sorter = _options$sorter === void 0 ? function (matchedItems) {\n    return matchedItems.sort(function (a, b) {\n      return sortRankedValues(a, b, baseSort);\n    });\n  } : _options$sorter;\n  var matchedItems = items.reduce(reduceItemsToRanked, []);\n  return sorter(matchedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n\n  function reduceItemsToRanked(matches, item, index) {\n    var rankingInfo = getHighestRanking(item, keys, value, options);\n    var rank = rankingInfo.rank,\n        _rankingInfo$keyThres = rankingInfo.keyThreshold,\n        keyThreshold = _rankingInfo$keyThres === void 0 ? threshold : _rankingInfo$keyThres;\n\n    if (rank >= keyThreshold) {\n      matches.push(_extends({}, rankingInfo, {\n        item: item,\n        index: index\n      }));\n    }\n\n    return matches;\n  }\n}\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\n\n\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    var stringItem = item;\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: stringItem,\n      rank: getMatchRanking(stringItem, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        rankedValue = _ref2.rankedValue,\n        keyIndex = _ref2.keyIndex,\n        keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n    var newRank = getMatchRanking(itemValue, value, options);\n    var newRankedValue = rankedValue;\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking,\n        threshold = attributes.threshold;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n      newRankedValue = itemValue;\n    }\n\n    return {\n      rankedValue: newRankedValue,\n      rank: rank,\n      keyIndex: keyIndex,\n      keyThreshold: keyThreshold\n    };\n  }, {\n    rankedValue: item,\n    rank: rankings.NO_MATCH,\n    keyIndex: -1,\n    keyThreshold: options.threshold\n  });\n}\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\n\n\nfunction getMatchRanking(testString, stringToRank, options) {\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\n\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  } // case sensitive equals\n\n\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  } // Lower casing before further comparison\n\n\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.EQUAL;\n  } // starts with\n\n\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH;\n  } // word starts with\n\n\n  if (testString.includes(\" \" + stringToRank)) {\n    return rankings.WORD_STARTS_WITH;\n  } // contains\n\n\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  } // acronym\n\n\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM;\n  } // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n\n\n  return getClosenessRanking(testString, stringToRank);\n}\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\n\n\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\n\n\nfunction getClosenessRanking(testString, stringToRank) {\n  var matchingInOrderCharCount = 0;\n  var charNumber = 0;\n\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index, J = string.length; j < J; j++) {\n      var stringChar = string[j];\n\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1;\n        return j + 1;\n      }\n    }\n\n    return -1;\n  }\n\n  function getRanking(spread) {\n    var spreadPercentage = 1 / spread;\n    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n    var ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n    return ranking;\n  }\n\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n\n  charNumber = firstIndex;\n\n  for (var i = 1, I = stringToRank.length; i < I; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\n\n\nfunction sortRankedValues(a, b, baseSort) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n      aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n      bKeyIndex = b.keyIndex;\n  var same = aRank === bRank;\n\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      // use the base sort function as a tie-breaker\n      return baseSort(a, b);\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\n\n\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n  // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = \"\" + value; // toString\n\n  if (!keepDiacritics) {\n    value = removeAccents(value);\n  }\n\n  return value;\n}\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\n\n\nfunction getItemValues(item, key) {\n  if (typeof key === 'object') {\n    key = key.key;\n  }\n\n  var value;\n\n  if (typeof key === 'function') {\n    value = key(item);\n  } else if (item == null) {\n    value = null;\n  } else if (Object.hasOwnProperty.call(item, key)) {\n    value = item[key];\n  } else if (key.includes('.')) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return getNestedValues(key, item);\n  } else {\n    value = null;\n  } // because `value` can also be undefined\n\n\n  if (value == null) {\n    return [];\n  }\n\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return [String(value)];\n}\n/**\n * Given path: \"foo.bar.baz\"\n * And item: {foo: {bar: {baz: 'buzz'}}}\n *   -> 'buzz'\n * @param path a dot-separated set of keys\n * @param item the item to get the value from\n */\n\n\nfunction getNestedValues(path, item) {\n  var keys = path.split('.');\n  var values = [item];\n\n  for (var i = 0, I = keys.length; i < I; i++) {\n    var nestedKey = keys[i];\n    var nestedValues = [];\n\n    for (var j = 0, J = values.length; j < J; j++) {\n      var nestedItem = values[j];\n      if (nestedItem == null) continue;\n\n      if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {\n        var nestedValue = nestedItem[nestedKey];\n\n        if (nestedValue != null) {\n          nestedValues.push(nestedValue);\n        }\n      } else if (nestedKey === '*') {\n        // ensure that values is an array\n        nestedValues = nestedValues.concat(nestedItem);\n      }\n    }\n\n    values = nestedValues;\n  }\n\n  if (Array.isArray(values[0])) {\n    // keep allowing the implicit wildcard for an array of strings at the end of\n    // the path; don't use `.flat()` because that's not available in node.js v10\n    var result = [];\n    return result.concat.apply(result, values);\n  } // Based on our logic it should be an array of strings by now...\n  // assuming the user's path terminated in strings\n\n\n  return values;\n}\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\n\n\nfunction getAllValuesToRank(item, keys) {\n  var allValues = [];\n\n  for (var j = 0, J = keys.length; j < J; j++) {\n    var key = keys[j];\n    var attributes = getKeyAttributes(key);\n    var itemValues = getItemValues(item, key);\n\n    for (var i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i],\n        attributes: attributes\n      });\n    }\n  }\n\n  return allValues;\n}\n\nvar defaultKeyAttributes = {\n  maxRanking: Infinity,\n  minRanking: -Infinity\n};\n/**\n * Gets all the attributes for the given key\n * @param key - the key from which the attributes will be retrieved\n * @return object containing the key's attributes\n */\n\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    return defaultKeyAttributes;\n  }\n\n  return _extends({}, defaultKeyAttributes, key);\n}\n/*\neslint\n  no-continue: \"off\",\n*/\n\nexport { defaultBaseSortFn, matchSorter, rankings };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}