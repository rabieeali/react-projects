{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\n// for when we need a query function for useQuery\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\nexport function useTreatments() {\n  _s();\n  const fallback = []; // loading indicator fallback we also added a useIfetching hook in Loading component to centeralize\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments);\n  return data;\n}\n_s(useTreatments, \"Dt1zu2A8Sa6608pid1m3JMfgG5k=\", false, function () {\n  return [useQuery];\n});\nexport function usePrefetchTreatment() {\n  _s2();\n  const queryClient = useQueryClient();\n  queryClient.prefetchQuery(queryKeys.treatments, {}); // key is very important!\n}\n_s2(usePrefetchTreatment, \"4R+oYVB2Uc11P7bp1KcuhpkfaTw=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"names":["useQuery","useQueryClient","axiosInstance","queryKeys","getTreatments","data","get","useTreatments","fallback","treatments","usePrefetchTreatment","queryClient","prefetchQuery"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"sourcesContent":["import { useQuery, useQueryClient } from 'react-query';\nimport type { Treatment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\n\n// for when we need a query function for useQuery\nasync function getTreatments(): Promise<Treatment[]> {\n  const { data } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments(): Treatment[] {\n  const fallback = []; // loading indicator fallback we also added a useIfetching hook in Loading component to centeralize\n  const { data = fallback } = useQuery(queryKeys.treatments, getTreatments);\n  return data;\n}\n\nexport function usePrefetchTreatment(): void {\n  const queryClient = useQueryClient()\n  queryClient.prefetchQuery(queryKeys.treatments, {\n  }) // key is very important!\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,cAAc,QAAQ,aAAa;AAEtD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,SAAS,QAAQ,gCAAgC;;AAG1D;AACA,eAAeC,aAAa,GAAyB;EACnD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMH,aAAa,CAACI,GAAG,CAAC,aAAa,CAAC;EACvD,OAAOD,IAAI;AACb;AAEA,OAAO,SAASE,aAAa,GAAgB;EAAA;EAC3C,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAM;IAAEH,IAAI,GAAGG;EAAS,CAAC,GAAGR,QAAQ,CAACG,SAAS,CAACM,UAAU,EAAEL,aAAa,CAAC;EACzE,OAAOC,IAAI;AACb;AAAC,GAJeE,aAAa;EAAA,QAECP,QAAQ;AAAA;AAItC,OAAO,SAASU,oBAAoB,GAAS;EAAA;EAC3C,MAAMC,WAAW,GAAGV,cAAc,EAAE;EACpCU,WAAW,CAACC,aAAa,CAACT,SAAS,CAACM,UAAU,EAAE,CAChD,CAAC,CAAC,EAAC;AACL;AAAC,IAJeC,oBAAoB;EAAA,QACdT,cAAc;AAAA"},"metadata":{},"sourceType":"module"}