{"ast":null,"code":"import { __rest, __assign } from 'tslib';\nimport { isRefObject } from '../../utils/is-ref-object.js';\nimport { invariant } from 'hey-listen';\nimport { progress } from 'popmotion';\nimport { getViewportPointFromEvent } from '../../events/event-info.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { addPointerEvent } from '../../events/use-pointer-event.js';\nimport { PanSession } from '../PanSession.js';\nimport { getGlobalLock } from './utils/lock.js';\nimport { axisBox, convertAxisBoxToBoundingBox, convertBoundingBoxToAxisBox } from '../../utils/geometry/index.js';\nimport { eachAxis } from '../../utils/each-axis.js';\nimport { calcOrigin } from '../../utils/geometry/delta-calc.js';\nimport { calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, defaultElastic } from './utils/constraints.js';\nimport { getBoundingBox } from '../../render/dom/projection/measure.js';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { AnimationType } from '../../render/utils/types.js';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\nvar lastPointerEvent;\nvar VisualElementDragControls = /** @class */function () {\n  function VisualElementDragControls(_a) {\n    var visualElement = _a.visualElement;\n    /**\n     * Track whether we're currently dragging.\n     *\n     * @internal\n     */\n    this.isDragging = false;\n    /**\n     * The current direction of drag, or `null` if both.\n     *\n     * @internal\n     */\n    this.currentDirection = null;\n    /**\n     * The permitted boundaries of travel, in pixels.\n     *\n     * @internal\n     */\n    this.constraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     *\n     * @internal\n     */\n    this.elastic = axisBox();\n    /**\n     * A reference to the host component's latest props.\n     *\n     * @internal\n     */\n    this.props = {};\n    /**\n     * @internal\n     */\n    this.hasMutatedConstraints = false;\n    /**\n     * Track the initial position of the cursor relative to the dragging element\n     * when dragging starts as a value of 0-1 on each axis. We then use this to calculate\n     * an ideal bounding box for the VisualElement renderer to project into every frame.\n     *\n     * @internal\n     */\n    this.cursorProgress = {\n      x: 0.5,\n      y: 0.5\n    };\n    // When updating _dragX, or _dragY instead of the VisualElement,\n    // persist their values between drag gestures.\n    this.originPoint = {};\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    /**\n     * @internal\n     */\n    this.panSession = null;\n    this.visualElement = visualElement;\n    this.visualElement.enableLayoutProjection();\n    elementDragControls.set(visualElement, this);\n  }\n  /**\n   * Instantiate a PanSession for the drag gesture\n   *\n   * @public\n   */\n  VisualElementDragControls.prototype.start = function (originEvent, _a) {\n    var _this = this;\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.snapToCursor,\n      snapToCursor = _c === void 0 ? false : _c,\n      cursorProgress = _b.cursorProgress;\n    /**\n     * If this drag session has been manually triggered by the user, it might be from an event\n     * outside the draggable element. If snapToCursor is set to true, we need to measure the position\n     * of the element and snap it to the cursor.\n     */\n    snapToCursor && this.snapToCursor(originEvent);\n    var onSessionStart = function () {\n      // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      _this.stopMotion();\n    };\n    var onStart = function (event, info) {\n      var _a, _b, _c;\n      // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n      var _d = _this.props,\n        drag = _d.drag,\n        dragPropagation = _d.dragPropagation;\n      if (drag && !dragPropagation) {\n        if (_this.openGlobalLock) _this.openGlobalLock();\n        _this.openGlobalLock = getGlobalLock(drag);\n        // If we don 't have the lock, don't start dragging\n        if (!_this.openGlobalLock) return;\n      }\n      /**\n       * Record the progress of the mouse within the draggable element on each axis.\n       * onPan, we're going to use this to calculate a new bounding box for the element to\n       * project into. This will ensure that even if the DOM element moves via a relayout, it'll\n       * stick to the correct place under the pointer.\n       */\n      _this.prepareBoundingBox();\n      _this.visualElement.lockProjectionTarget();\n      /**\n       * Resolve the drag constraints. These are either set as top/right/bottom/left constraints\n       * relative to the element's layout, or a ref to another element. Both need converting to\n       * viewport coordinates.\n       */\n      _this.resolveDragConstraints();\n      /**\n       * When dragging starts, we want to find where the cursor is relative to the bounding box\n       * of the element. Every frame, we calculate a new bounding box using this relative position\n       * and let the visualElement renderer figure out how to reproject the element into this bounding\n       * box.\n       *\n       * By doing it this way, rather than applying an x/y transform directly to the element,\n       * we can ensure the component always visually sticks to the cursor as we'd expect, even\n       * if the DOM element itself changes layout as a result of React updates the user might\n       * make based on the drag position.\n       */\n      var point = getViewportPointFromEvent(event).point;\n      eachAxis(function (axis) {\n        var _a = _this.visualElement.projection.target[axis],\n          min = _a.min,\n          max = _a.max;\n        _this.cursorProgress[axis] = cursorProgress ? cursorProgress[axis] : progress(min, max, point[axis]);\n        /**\n         * If we have external drag MotionValues, record their origin point. On pointermove\n         * we'll apply the pan gesture offset directly to this value.\n         */\n        var axisValue = _this.getAxisMotionValue(axis);\n        if (axisValue) {\n          _this.originPoint[axis] = axisValue.get();\n        }\n      });\n      // Set current drag status\n      _this.isDragging = true;\n      _this.currentDirection = null;\n      // Fire onDragStart event\n      (_b = (_a = _this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n      (_c = _this.visualElement.animationState) === null || _c === void 0 ? void 0 : _c.setActive(AnimationType.Drag, true);\n    };\n    var onMove = function (event, info) {\n      var _a, _b, _c, _d;\n      var _e = _this.props,\n        dragPropagation = _e.dragPropagation,\n        dragDirectionLock = _e.dragDirectionLock;\n      // If we didn't successfully receive the gesture lock, early return.\n      if (!dragPropagation && !_this.openGlobalLock) return;\n      var offset = info.offset;\n      // Attempt to detect drag direction if directionLock is true\n      if (dragDirectionLock && _this.currentDirection === null) {\n        _this.currentDirection = getCurrentDirection(offset);\n        // If we've successfully set a direction, notify listener\n        if (_this.currentDirection !== null) {\n          (_b = (_a = _this.props).onDirectionLock) === null || _b === void 0 ? void 0 : _b.call(_a, _this.currentDirection);\n        }\n        return;\n      }\n      // Update each point with the latest position\n      _this.updateAxis(\"x\", event, offset);\n      _this.updateAxis(\"y\", event, offset);\n      // Fire onDrag event\n      (_d = (_c = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n      // Update the last pointer event\n      lastPointerEvent = event;\n    };\n    var onEnd = function (event, info) {\n      return _this.stop(event, info);\n    };\n    var transformPagePoint = this.props.transformPagePoint;\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart: onSessionStart,\n      onStart: onStart,\n      onMove: onMove,\n      onEnd: onEnd\n    }, {\n      transformPagePoint: transformPagePoint\n    });\n  };\n  /**\n   * Ensure the component's layout and target bounding boxes are up-to-date.\n   */\n  VisualElementDragControls.prototype.prepareBoundingBox = function () {\n    var visualElement = this.visualElement;\n    visualElement.withoutTransform(function () {\n      visualElement.updateLayoutMeasurement();\n    });\n    visualElement.rebaseProjectionTarget(true, visualElement.measureViewportBox(false));\n  };\n  VisualElementDragControls.prototype.resolveDragConstraints = function () {\n    var _this = this;\n    var _a = this.props,\n      dragConstraints = _a.dragConstraints,\n      dragElastic = _a.dragElastic;\n    if (dragConstraints) {\n      this.constraints = isRefObject(dragConstraints) ? this.resolveRefConstraints(this.visualElement.getLayoutState().layout, dragConstraints) : calcRelativeConstraints(this.visualElement.getLayoutState().layout, dragConstraints);\n    } else {\n      this.constraints = false;\n    }\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\n     * from viewport-relative to component-relative.\n     */\n    if (this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(function (axis) {\n        if (_this.getAxisMotionValue(axis)) {\n          _this.constraints[axis] = rebaseAxisConstraints(_this.visualElement.getLayoutState().layout[axis], _this.constraints[axis]);\n        }\n      });\n    }\n  };\n  VisualElementDragControls.prototype.resolveRefConstraints = function (layoutBox, constraints) {\n    var _a = this.props,\n      onMeasureDragConstraints = _a.onMeasureDragConstraints,\n      transformPagePoint = _a.transformPagePoint;\n    var constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);\n    var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);\n    /**\n     * If there's an onMeasureDragConstraints listener we call it and\n     * if different constraints are returned, set constraints to that\n     */\n    if (onMeasureDragConstraints) {\n      var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);\n      }\n    }\n    return measuredConstraints;\n  };\n  VisualElementDragControls.prototype.cancelDrag = function () {\n    var _a;\n    this.isDragging = false;\n    this.panSession && this.panSession.end();\n    this.panSession = null;\n    if (!this.props.dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n    (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, false);\n  };\n  VisualElementDragControls.prototype.stop = function (event, info) {\n    var _a;\n    this.visualElement.unlockProjectionTarget();\n    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n    this.panSession = null;\n    var isDragging = this.isDragging;\n    this.cancelDrag();\n    if (!isDragging) return;\n    var _b = this.props,\n      dragMomentum = _b.dragMomentum,\n      onDragEnd = _b.onDragEnd;\n    if (dragMomentum || this.elastic) {\n      var velocity = info.velocity;\n      this.animateDragEnd(velocity);\n    }\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n  };\n  VisualElementDragControls.prototype.snapToCursor = function (event) {\n    var _this = this;\n    this.prepareBoundingBox();\n    eachAxis(function (axis) {\n      var drag = _this.props.drag;\n      // If we're not dragging this axis, do an early return.\n      if (!shouldDrag(axis, drag, _this.currentDirection)) return;\n      var axisValue = _this.getAxisMotionValue(axis);\n      if (axisValue) {\n        var point = getViewportPointFromEvent(event).point;\n        var box = _this.visualElement.getLayoutState().layout;\n        var length_1 = box[axis].max - box[axis].min;\n        var center = box[axis].min + length_1 / 2;\n        var offset = point[axis] - center;\n        _this.originPoint[axis] = point[axis];\n        axisValue.set(offset);\n      } else {\n        _this.cursorProgress[axis] = 0.5;\n        _this.updateVisualElementAxis(axis, event);\n      }\n    });\n  };\n  /**\n   * Update the specified axis with the latest pointer information.\n   */\n  VisualElementDragControls.prototype.updateAxis = function (axis, event, offset) {\n    var drag = this.props.drag;\n    // If we're not dragging this axis, do an early return.\n    if (!shouldDrag(axis, drag, this.currentDirection)) return;\n    return this.getAxisMotionValue(axis) ? this.updateAxisMotionValue(axis, offset) : this.updateVisualElementAxis(axis, event);\n  };\n  VisualElementDragControls.prototype.updateAxisMotionValue = function (axis, offset) {\n    var axisValue = this.getAxisMotionValue(axis);\n    if (!offset || !axisValue) return;\n    var nextValue = this.originPoint[axis] + offset[axis];\n    var update = this.constraints ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis]) : nextValue;\n    axisValue.set(update);\n  };\n  VisualElementDragControls.prototype.updateVisualElementAxis = function (axis, event) {\n    var _a;\n    // Get the actual layout bounding box of the element\n    var axisLayout = this.visualElement.getLayoutState().layout[axis];\n    // Calculate its current length. In the future we might want to lerp this to animate\n    // between lengths if the layout changes as we change the DOM\n    var axisLength = axisLayout.max - axisLayout.min;\n    // Get the initial progress that the pointer sat on this axis on gesture start.\n    var axisProgress = this.cursorProgress[axis];\n    var point = getViewportPointFromEvent(event).point;\n    // Calculate a new min point based on the latest pointer position, constraints and elastic\n    var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]);\n    // Update the axis viewport target with this new min and the length\n    this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);\n  };\n  VisualElementDragControls.prototype.setProps = function (_a) {\n    var _b = _a.drag,\n      drag = _b === void 0 ? false : _b,\n      _c = _a.dragDirectionLock,\n      dragDirectionLock = _c === void 0 ? false : _c,\n      _d = _a.dragPropagation,\n      dragPropagation = _d === void 0 ? false : _d,\n      _e = _a.dragConstraints,\n      dragConstraints = _e === void 0 ? false : _e,\n      _f = _a.dragElastic,\n      dragElastic = _f === void 0 ? defaultElastic : _f,\n      _g = _a.dragMomentum,\n      dragMomentum = _g === void 0 ? true : _g,\n      remainingProps = __rest(_a, [\"drag\", \"dragDirectionLock\", \"dragPropagation\", \"dragConstraints\", \"dragElastic\", \"dragMomentum\"]);\n    this.props = __assign({\n      drag: drag,\n      dragDirectionLock: dragDirectionLock,\n      dragPropagation: dragPropagation,\n      dragConstraints: dragConstraints,\n      dragElastic: dragElastic,\n      dragMomentum: dragMomentum\n    }, remainingProps);\n  };\n  /**\n   * Drag works differently depending on which props are provided.\n   *\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n   * - If the component will perform layout animations, we output the gesture to the component's\n   *      visual bounding box\n   * - Otherwise, we apply the delta to the x/y motion values.\n   */\n  VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n    var _a = this.props,\n      layout = _a.layout,\n      layoutId = _a.layoutId;\n    var dragKey = \"_drag\" + axis.toUpperCase();\n    if (this.props[dragKey]) {\n      return this.props[dragKey];\n    } else if (!layout && layoutId === undefined) {\n      return this.visualElement.getValue(axis, 0);\n    }\n  };\n  VisualElementDragControls.prototype.animateDragEnd = function (velocity) {\n    var _this = this;\n    var _a = this.props,\n      drag = _a.drag,\n      dragMomentum = _a.dragMomentum,\n      dragElastic = _a.dragElastic,\n      dragTransition = _a.dragTransition;\n    var momentumAnimations = eachAxis(function (axis) {\n      if (!shouldDrag(axis, drag, _this.currentDirection)) {\n        return;\n      }\n      var transition = _this.constraints ? _this.constraints[axis] : {};\n      /**\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n       * using the value of `dragElastic`.\n       */\n      var bounceStiffness = dragElastic ? 200 : 1000000;\n      var bounceDamping = dragElastic ? 40 : 10000000;\n      var inertia = __assign(__assign({\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness: bounceStiffness,\n        bounceDamping: bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10\n      }, dragTransition), transition);\n      // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n      return _this.getAxisMotionValue(axis) ? _this.startAxisValueAnimation(axis, inertia) : _this.visualElement.startLayoutAnimation(axis, inertia);\n    });\n    // Run all animations and then resolve the new drag constraints.\n    return Promise.all(momentumAnimations).then(function () {\n      var _a, _b;\n      (_b = (_a = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n    });\n  };\n  VisualElementDragControls.prototype.stopMotion = function () {\n    var _this = this;\n    eachAxis(function (axis) {\n      var axisValue = _this.getAxisMotionValue(axis);\n      axisValue ? axisValue.stop() : _this.visualElement.stopLayoutAnimation();\n    });\n  };\n  VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n    var axisValue = this.getAxisMotionValue(axis);\n    if (!axisValue) return;\n    var currentValue = axisValue.get();\n    axisValue.set(currentValue);\n    axisValue.set(currentValue); // Set twice to hard-reset velocity\n    return startAnimation(axis, axisValue, 0, transition);\n  };\n  VisualElementDragControls.prototype.scalePoint = function () {\n    var _this = this;\n    var _a = this.props,\n      drag = _a.drag,\n      dragConstraints = _a.dragConstraints;\n    if (!isRefObject(dragConstraints) || !this.constraintsBox) return;\n    // Stop any current animations as there can be some visual glitching if we resize mid animation\n    this.stopMotion();\n    // Record the relative progress of the targetBox relative to the constraintsBox\n    var boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(function (axis) {\n      boxProgress[axis] = calcOrigin(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);\n    });\n    /**\n     * For each axis, calculate the current progress of the layout axis within the constraints.\n     * Then, using the latest layout and constraints measurements, reposition the new layout axis\n     * proportionally within the constraints.\n     */\n    this.prepareBoundingBox();\n    this.resolveDragConstraints();\n    eachAxis(function (axis) {\n      if (!shouldDrag(axis, drag, null)) return;\n      // Calculate the position of the targetBox relative to the constraintsBox using the\n      // previously calculated progress\n      var _a = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]),\n        min = _a.min,\n        max = _a.max;\n      _this.visualElement.setProjectionTargetAxis(axis, min, max);\n    });\n  };\n  VisualElementDragControls.prototype.mount = function (visualElement) {\n    var _this = this;\n    var element = visualElement.getInstance();\n    /**\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n     */\n    var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n      var _a = _this.props,\n        drag = _a.drag,\n        _b = _a.dragListener,\n        dragListener = _b === void 0 ? true : _b;\n      drag && dragListener && _this.start(event);\n    });\n    /**\n     * Attach a window resize listener to scale the draggable target within its defined\n     * constraints as the window resizes.\n     */\n    var stopResizeListener = addDomEvent(window, \"resize\", function () {\n      _this.scalePoint();\n    });\n    /**\n     * Ensure drag constraints are resolved correctly relative to the dragging element\n     * whenever its layout changes.\n     */\n    var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function () {\n      if (_this.isDragging) _this.resolveDragConstraints();\n    });\n    /**\n     * If the previous component with this same layoutId was dragging at the time\n     * it was unmounted, we want to continue the same gesture on this component.\n     */\n    var prevDragCursor = visualElement.prevDragCursor;\n    if (prevDragCursor) {\n      this.start(lastPointerEvent, {\n        cursorProgress: prevDragCursor\n      });\n    }\n    /**\n     * Return a function that will teardown the drag gesture\n     */\n    return function () {\n      stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();\n      stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();\n      stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n      _this.cancelDrag();\n    };\n  };\n  return VisualElementDragControls;\n}();\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n  if (lockThreshold === void 0) {\n    lockThreshold = 10;\n  }\n  var direction = null;\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n  return direction;\n}\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["__rest","__assign","isRefObject","invariant","progress","getViewportPointFromEvent","addDomEvent","addPointerEvent","PanSession","getGlobalLock","axisBox","convertAxisBoxToBoundingBox","convertBoundingBoxToAxisBox","eachAxis","calcOrigin","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","applyConstraints","calcConstrainedMinPoint","calcPositionFromProgress","defaultElastic","getBoundingBox","startAnimation","AnimationType","elementDragControls","WeakMap","lastPointerEvent","VisualElementDragControls","_a","visualElement","isDragging","currentDirection","constraints","elastic","props","hasMutatedConstraints","cursorProgress","x","y","originPoint","openGlobalLock","panSession","enableLayoutProjection","set","prototype","start","originEvent","_this","_b","_c","snapToCursor","onSessionStart","stopMotion","onStart","event","info","_d","drag","dragPropagation","prepareBoundingBox","lockProjectionTarget","resolveDragConstraints","point","axis","projection","target","min","max","axisValue","getAxisMotionValue","get","onDragStart","call","animationState","setActive","Drag","onMove","_e","dragDirectionLock","offset","getCurrentDirection","onDirectionLock","updateAxis","onDrag","onEnd","stop","transformPagePoint","withoutTransform","updateLayoutMeasurement","rebaseProjectionTarget","measureViewportBox","dragConstraints","dragElastic","resolveRefConstraints","getLayoutState","layout","layoutBox","onMeasureDragConstraints","constraintsElement","current","constraintsBox","measuredConstraints","userConstraints","cancelDrag","end","unlockProjectionTarget","dragMomentum","onDragEnd","velocity","animateDragEnd","shouldDrag","box","length_1","center","updateVisualElementAxis","updateAxisMotionValue","nextValue","update","axisLayout","axisLength","axisProgress","setProjectionTargetAxis","setProps","_f","_g","remainingProps","layoutId","dragKey","toUpperCase","undefined","getValue","dragTransition","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","startLayoutAnimation","Promise","all","then","onDragTransitionEnd","stopLayoutAnimation","currentValue","scalePoint","boxProgress","mount","element","getInstance","stopPointerListener","dragListener","stopResizeListener","window","stopLayoutUpdateListener","onLayoutUpdate","prevDragCursor","direction","lockThreshold","Math","abs"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js"],"sourcesContent":["import { __rest, __assign } from 'tslib';\nimport { isRefObject } from '../../utils/is-ref-object.js';\nimport { invariant } from 'hey-listen';\nimport { progress } from 'popmotion';\nimport { getViewportPointFromEvent } from '../../events/event-info.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { addPointerEvent } from '../../events/use-pointer-event.js';\nimport { PanSession } from '../PanSession.js';\nimport { getGlobalLock } from './utils/lock.js';\nimport { axisBox, convertAxisBoxToBoundingBox, convertBoundingBoxToAxisBox } from '../../utils/geometry/index.js';\nimport { eachAxis } from '../../utils/each-axis.js';\nimport { calcOrigin } from '../../utils/geometry/delta-calc.js';\nimport { calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, defaultElastic } from './utils/constraints.js';\nimport { getBoundingBox } from '../../render/dom/projection/measure.js';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { AnimationType } from '../../render/utils/types.js';\n\nvar elementDragControls = new WeakMap();\n/**\n *\n */\nvar lastPointerEvent;\nvar VisualElementDragControls = /** @class */ (function () {\n    function VisualElementDragControls(_a) {\n        var visualElement = _a.visualElement;\n        /**\n         * Track whether we're currently dragging.\n         *\n         * @internal\n         */\n        this.isDragging = false;\n        /**\n         * The current direction of drag, or `null` if both.\n         *\n         * @internal\n         */\n        this.currentDirection = null;\n        /**\n         * The permitted boundaries of travel, in pixels.\n         *\n         * @internal\n         */\n        this.constraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         *\n         * @internal\n         */\n        this.elastic = axisBox();\n        /**\n         * A reference to the host component's latest props.\n         *\n         * @internal\n         */\n        this.props = {};\n        /**\n         * @internal\n         */\n        this.hasMutatedConstraints = false;\n        /**\n         * Track the initial position of the cursor relative to the dragging element\n         * when dragging starts as a value of 0-1 on each axis. We then use this to calculate\n         * an ideal bounding box for the VisualElement renderer to project into every frame.\n         *\n         * @internal\n         */\n        this.cursorProgress = {\n            x: 0.5,\n            y: 0.5,\n        };\n        // When updating _dragX, or _dragY instead of the VisualElement,\n        // persist their values between drag gestures.\n        this.originPoint = {};\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        /**\n         * @internal\n         */\n        this.panSession = null;\n        this.visualElement = visualElement;\n        this.visualElement.enableLayoutProjection();\n        elementDragControls.set(visualElement, this);\n    }\n    /**\n     * Instantiate a PanSession for the drag gesture\n     *\n     * @public\n     */\n    VisualElementDragControls.prototype.start = function (originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c, cursorProgress = _b.cursorProgress;\n        /**\n         * If this drag session has been manually triggered by the user, it might be from an event\n         * outside the draggable element. If snapToCursor is set to true, we need to measure the position\n         * of the element and snap it to the cursor.\n         */\n        snapToCursor && this.snapToCursor(originEvent);\n        var onSessionStart = function () {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopMotion();\n        };\n        var onStart = function (event, info) {\n            var _a, _b, _c;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _d = _this.props, drag = _d.drag, dragPropagation = _d.dragPropagation;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock)\n                    _this.openGlobalLock();\n                _this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock)\n                    return;\n            }\n            /**\n             * Record the progress of the mouse within the draggable element on each axis.\n             * onPan, we're going to use this to calculate a new bounding box for the element to\n             * project into. This will ensure that even if the DOM element moves via a relayout, it'll\n             * stick to the correct place under the pointer.\n             */\n            _this.prepareBoundingBox();\n            _this.visualElement.lockProjectionTarget();\n            /**\n             * Resolve the drag constraints. These are either set as top/right/bottom/left constraints\n             * relative to the element's layout, or a ref to another element. Both need converting to\n             * viewport coordinates.\n             */\n            _this.resolveDragConstraints();\n            /**\n             * When dragging starts, we want to find where the cursor is relative to the bounding box\n             * of the element. Every frame, we calculate a new bounding box using this relative position\n             * and let the visualElement renderer figure out how to reproject the element into this bounding\n             * box.\n             *\n             * By doing it this way, rather than applying an x/y transform directly to the element,\n             * we can ensure the component always visually sticks to the cursor as we'd expect, even\n             * if the DOM element itself changes layout as a result of React updates the user might\n             * make based on the drag position.\n             */\n            var point = getViewportPointFromEvent(event).point;\n            eachAxis(function (axis) {\n                var _a = _this.visualElement.projection.target[axis], min = _a.min, max = _a.max;\n                _this.cursorProgress[axis] = cursorProgress\n                    ? cursorProgress[axis]\n                    : progress(min, max, point[axis]);\n                /**\n                 * If we have external drag MotionValues, record their origin point. On pointermove\n                 * we'll apply the pan gesture offset directly to this value.\n                 */\n                var axisValue = _this.getAxisMotionValue(axis);\n                if (axisValue) {\n                    _this.originPoint[axis] = axisValue.get();\n                }\n            });\n            // Set current drag status\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            // Fire onDragStart event\n            (_b = (_a = _this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n            (_c = _this.visualElement.animationState) === null || _c === void 0 ? void 0 : _c.setActive(AnimationType.Drag, true);\n        };\n        var onMove = function (event, info) {\n            var _a, _b, _c, _d;\n            var _e = _this.props, dragPropagation = _e.dragPropagation, dragDirectionLock = _e.dragDirectionLock;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock)\n                return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    (_b = (_a = _this.props).onDirectionLock) === null || _b === void 0 ? void 0 : _b.call(_a, _this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", event, offset);\n            _this.updateAxis(\"y\", event, offset);\n            // Fire onDrag event\n            (_d = (_c = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n            // Update the last pointer event\n            lastPointerEvent = event;\n        };\n        var onEnd = function (event, info) { return _this.stop(event, info); };\n        var transformPagePoint = this.props.transformPagePoint;\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onEnd: onEnd,\n        }, { transformPagePoint: transformPagePoint });\n    };\n    /**\n     * Ensure the component's layout and target bounding boxes are up-to-date.\n     */\n    VisualElementDragControls.prototype.prepareBoundingBox = function () {\n        var visualElement = this.visualElement;\n        visualElement.withoutTransform(function () {\n            visualElement.updateLayoutMeasurement();\n        });\n        visualElement.rebaseProjectionTarget(true, visualElement.measureViewportBox(false));\n    };\n    VisualElementDragControls.prototype.resolveDragConstraints = function () {\n        var _this = this;\n        var _a = this.props, dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        if (dragConstraints) {\n            this.constraints = isRefObject(dragConstraints)\n                ? this.resolveRefConstraints(this.visualElement.getLayoutState().layout, dragConstraints)\n                : calcRelativeConstraints(this.visualElement.getLayoutState().layout, dragConstraints);\n        }\n        else {\n            this.constraints = false;\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (this.constraints && !this.hasMutatedConstraints) {\n            eachAxis(function (axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = rebaseAxisConstraints(_this.visualElement.getLayoutState().layout[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function (layoutBox, constraints) {\n        var _a = this.props, onMeasureDragConstraints = _a.onMeasureDragConstraints, transformPagePoint = _a.transformPagePoint;\n        var constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);\n        var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.cancelDrag = function () {\n        var _a;\n        this.isDragging = false;\n        this.panSession && this.panSession.end();\n        this.panSession = null;\n        if (!this.props.dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.stop = function (event, info) {\n        var _a;\n        this.visualElement.unlockProjectionTarget();\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = null;\n        var isDragging = this.isDragging;\n        this.cancelDrag();\n        if (!isDragging)\n            return;\n        var _b = this.props, dragMomentum = _b.dragMomentum, onDragEnd = _b.onDragEnd;\n        if (dragMomentum || this.elastic) {\n            var velocity = info.velocity;\n            this.animateDragEnd(velocity);\n        }\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function (event) {\n        var _this = this;\n        this.prepareBoundingBox();\n        eachAxis(function (axis) {\n            var drag = _this.props.drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection))\n                return;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var point = getViewportPointFromEvent(event).point;\n                var box = _this.visualElement.getLayoutState().layout;\n                var length_1 = box[axis].max - box[axis].min;\n                var center = box[axis].min + length_1 / 2;\n                var offset = point[axis] - center;\n                _this.originPoint[axis] = point[axis];\n                axisValue.set(offset);\n            }\n            else {\n                _this.cursorProgress[axis] = 0.5;\n                _this.updateVisualElementAxis(axis, event);\n            }\n        });\n    };\n    /**\n     * Update the specified axis with the latest pointer information.\n     */\n    VisualElementDragControls.prototype.updateAxis = function (axis, event, offset) {\n        var drag = this.props.drag;\n        // If we're not dragging this axis, do an early return.\n        if (!shouldDrag(axis, drag, this.currentDirection))\n            return;\n        return this.getAxisMotionValue(axis)\n            ? this.updateAxisMotionValue(axis, offset)\n            : this.updateVisualElementAxis(axis, event);\n    };\n    VisualElementDragControls.prototype.updateAxisMotionValue = function (axis, offset) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!offset || !axisValue)\n            return;\n        var nextValue = this.originPoint[axis] + offset[axis];\n        var update = this.constraints\n            ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis])\n            : nextValue;\n        axisValue.set(update);\n    };\n    VisualElementDragControls.prototype.updateVisualElementAxis = function (axis, event) {\n        var _a;\n        // Get the actual layout bounding box of the element\n        var axisLayout = this.visualElement.getLayoutState().layout[axis];\n        // Calculate its current length. In the future we might want to lerp this to animate\n        // between lengths if the layout changes as we change the DOM\n        var axisLength = axisLayout.max - axisLayout.min;\n        // Get the initial progress that the pointer sat on this axis on gesture start.\n        var axisProgress = this.cursorProgress[axis];\n        var point = getViewportPointFromEvent(event).point;\n        // Calculate a new min point based on the latest pointer position, constraints and elastic\n        var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]);\n        // Update the axis viewport target with this new min and the length\n        this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);\n    };\n    VisualElementDragControls.prototype.setProps = function (_a) {\n        var _b = _a.drag, drag = _b === void 0 ? false : _b, _c = _a.dragDirectionLock, dragDirectionLock = _c === void 0 ? false : _c, _d = _a.dragPropagation, dragPropagation = _d === void 0 ? false : _d, _e = _a.dragConstraints, dragConstraints = _e === void 0 ? false : _e, _f = _a.dragElastic, dragElastic = _f === void 0 ? defaultElastic : _f, _g = _a.dragMomentum, dragMomentum = _g === void 0 ? true : _g, remainingProps = __rest(_a, [\"drag\", \"dragDirectionLock\", \"dragPropagation\", \"dragConstraints\", \"dragElastic\", \"dragMomentum\"]);\n        this.props = __assign({ drag: drag,\n            dragDirectionLock: dragDirectionLock,\n            dragPropagation: dragPropagation,\n            dragConstraints: dragConstraints,\n            dragElastic: dragElastic,\n            dragMomentum: dragMomentum }, remainingProps);\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - If the component will perform layout animations, we output the gesture to the component's\n     *      visual bounding box\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n        var _a = this.props, layout = _a.layout, layoutId = _a.layoutId;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        if (this.props[dragKey]) {\n            return this.props[dragKey];\n        }\n        else if (!layout && layoutId === undefined) {\n            return this.visualElement.getValue(axis, 0);\n        }\n    };\n    VisualElementDragControls.prototype.animateDragEnd = function (velocity) {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition;\n        var momentumAnimations = eachAxis(function (axis) {\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = _this.constraints ? _this.constraints[axis] : {};\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = __assign(__assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness: bounceStiffness,\n                bounceDamping: bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.getAxisMotionValue(axis)\n                ? _this.startAxisValueAnimation(axis, inertia)\n                : _this.visualElement.startLayoutAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(function () {\n            var _a, _b;\n            (_b = (_a = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n    };\n    VisualElementDragControls.prototype.stopMotion = function () {\n        var _this = this;\n        eachAxis(function (axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            axisValue\n                ? axisValue.stop()\n                : _this.visualElement.stopLayoutAnimation();\n        });\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!axisValue)\n            return;\n        var currentValue = axisValue.get();\n        axisValue.set(currentValue);\n        axisValue.set(currentValue); // Set twice to hard-reset velocity\n        return startAnimation(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.scalePoint = function () {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragConstraints = _a.dragConstraints;\n        if (!isRefObject(dragConstraints) || !this.constraintsBox)\n            return;\n        // Stop any current animations as there can be some visual glitching if we resize mid animation\n        this.stopMotion();\n        // Record the relative progress of the targetBox relative to the constraintsBox\n        var boxProgress = { x: 0, y: 0 };\n        eachAxis(function (axis) {\n            boxProgress[axis] = calcOrigin(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);\n        });\n        /**\n         * For each axis, calculate the current progress of the layout axis within the constraints.\n         * Then, using the latest layout and constraints measurements, reposition the new layout axis\n         * proportionally within the constraints.\n         */\n        this.prepareBoundingBox();\n        this.resolveDragConstraints();\n        eachAxis(function (axis) {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            // Calculate the position of the targetBox relative to the constraintsBox using the\n            // previously calculated progress\n            var _a = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a.min, max = _a.max;\n            _this.visualElement.setProjectionTargetAxis(axis, min, max);\n        });\n    };\n    VisualElementDragControls.prototype.mount = function (visualElement) {\n        var _this = this;\n        var element = visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n            var _a = _this.props, drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        var stopResizeListener = addDomEvent(window, \"resize\", function () {\n            _this.scalePoint();\n        });\n        /**\n         * Ensure drag constraints are resolved correctly relative to the dragging element\n         * whenever its layout changes.\n         */\n        var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function () {\n            if (_this.isDragging)\n                _this.resolveDragConstraints();\n        });\n        /**\n         * If the previous component with this same layoutId was dragging at the time\n         * it was unmounted, we want to continue the same gesture on this component.\n         */\n        var prevDragCursor = visualElement.prevDragCursor;\n        if (prevDragCursor) {\n            this.start(lastPointerEvent, { cursorProgress: prevDragCursor });\n        }\n        /**\n         * Return a function that will teardown the drag gesture\n         */\n        return function () {\n            stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();\n            stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n            _this.cancelDrag();\n        };\n    };\n    return VisualElementDragControls;\n}());\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) { lockThreshold = 10; }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}