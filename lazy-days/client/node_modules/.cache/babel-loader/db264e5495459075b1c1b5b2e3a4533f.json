{"ast":null,"code":"import React, { useContext } from 'react';\nimport { __extends, __assign } from 'tslib';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\n\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\nvar Measure = /** @class */function (_super) {\n  __extends(Measure, _super);\n  function Measure() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * If this is a child of a SyncContext, register the VisualElement with it on mount.\n   */\n  Measure.prototype.componentDidMount = function () {\n    var _a = this.props,\n      syncLayout = _a.syncLayout,\n      framerSyncLayout = _a.framerSyncLayout,\n      visualElement = _a.visualElement;\n    isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n    isSharedLayout(framerSyncLayout) && framerSyncLayout.register(visualElement);\n  };\n  /**\n   * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n   * handle the snapshotting.\n   *\n   * If it is stand-alone component, add it to the batcher.\n   */\n  Measure.prototype.getSnapshotBeforeUpdate = function () {\n    var _a = this.props,\n      syncLayout = _a.syncLayout,\n      visualElement = _a.visualElement;\n    if (isSharedLayout(syncLayout)) {\n      syncLayout.syncUpdate();\n    } else {\n      visualElement.snapshotViewportBox();\n      syncLayout.add(visualElement);\n    }\n    return null;\n  };\n  Measure.prototype.componentDidUpdate = function () {\n    var _a = this.props,\n      syncLayout = _a.syncLayout,\n      visualElement = _a.visualElement;\n    if (!isSharedLayout(syncLayout)) syncLayout.flush();\n    /**\n     * If this axis isn't animating as a result of this render we want to reset the targetBox\n     * to the measured box\n     */\n    visualElement.rebaseProjectionTarget();\n  };\n  Measure.prototype.render = function () {\n    return null;\n  };\n  return Measure;\n}(React.Component);\nfunction MeasureContextProvider(props) {\n  var syncLayout = useContext(SharedLayoutContext);\n  var framerSyncLayout = useContext(FramerTreeLayoutContext);\n  return React.createElement(Measure, __assign({}, props, {\n    syncLayout: syncLayout,\n    framerSyncLayout: framerSyncLayout\n  }));\n}\nvar MeasureLayout = {\n  key: \"measure-layout\",\n  shouldRender: function (props) {\n    return !!props.drag || !!props.layout || props.layoutId !== undefined;\n  },\n  getComponent: function () {\n    return MeasureContextProvider;\n  }\n};\nexport { MeasureLayout };","map":{"version":3,"names":["React","useContext","__extends","__assign","isSharedLayout","SharedLayoutContext","FramerTreeLayoutContext","Measure","_super","apply","arguments","prototype","componentDidMount","_a","props","syncLayout","framerSyncLayout","visualElement","register","getSnapshotBeforeUpdate","syncUpdate","snapshotViewportBox","add","componentDidUpdate","flush","rebaseProjectionTarget","render","Component","MeasureContextProvider","createElement","MeasureLayout","key","shouldRender","drag","layout","layoutId","undefined","getComponent"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/framer-motion/dist/es/motion/features/layout/Measure.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { __extends, __assign } from 'tslib';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\n\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\nvar Measure = /** @class */ (function (_super) {\n    __extends(Measure, _super);\n    function Measure() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * If this is a child of a SyncContext, register the VisualElement with it on mount.\n     */\n    Measure.prototype.componentDidMount = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, framerSyncLayout = _a.framerSyncLayout, visualElement = _a.visualElement;\n        isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n        isSharedLayout(framerSyncLayout) &&\n            framerSyncLayout.register(visualElement);\n    };\n    /**\n     * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n     * handle the snapshotting.\n     *\n     * If it is stand-alone component, add it to the batcher.\n     */\n    Measure.prototype.getSnapshotBeforeUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (isSharedLayout(syncLayout)) {\n            syncLayout.syncUpdate();\n        }\n        else {\n            visualElement.snapshotViewportBox();\n            syncLayout.add(visualElement);\n        }\n        return null;\n    };\n    Measure.prototype.componentDidUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (!isSharedLayout(syncLayout))\n            syncLayout.flush();\n        /**\n         * If this axis isn't animating as a result of this render we want to reset the targetBox\n         * to the measured box\n         */\n        visualElement.rebaseProjectionTarget();\n    };\n    Measure.prototype.render = function () {\n        return null;\n    };\n    return Measure;\n}(React.Component));\nfunction MeasureContextProvider(props) {\n    var syncLayout = useContext(SharedLayoutContext);\n    var framerSyncLayout = useContext(FramerTreeLayoutContext);\n    return (React.createElement(Measure, __assign({}, props, { syncLayout: syncLayout, framerSyncLayout: framerSyncLayout })));\n}\nvar MeasureLayout = {\n    key: \"measure-layout\",\n    shouldRender: function (props) {\n        return !!props.drag || !!props.layout || props.layoutId !== undefined;\n    },\n    getComponent: function () { return MeasureContextProvider; },\n};\n\nexport { MeasureLayout };\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,cAAc,EAAEC,mBAAmB,EAAEC,uBAAuB,QAAQ,yCAAyC;;AAEtH;AACA;AACA;AACA,IAAIC,OAAO,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC3CN,SAAS,CAACK,OAAO,EAAEC,MAAM,CAAC;EAC1B,SAASD,OAAO,GAAG;IACf,OAAOC,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACnE;EACA;AACJ;AACA;EACIH,OAAO,CAACI,SAAS,CAACC,iBAAiB,GAAG,YAAY;IAC9C,IAAIC,EAAE,GAAG,IAAI,CAACC,KAAK;MAAEC,UAAU,GAAGF,EAAE,CAACE,UAAU;MAAEC,gBAAgB,GAAGH,EAAE,CAACG,gBAAgB;MAAEC,aAAa,GAAGJ,EAAE,CAACI,aAAa;IACzHb,cAAc,CAACW,UAAU,CAAC,IAAIA,UAAU,CAACG,QAAQ,CAACD,aAAa,CAAC;IAChEb,cAAc,CAACY,gBAAgB,CAAC,IAC5BA,gBAAgB,CAACE,QAAQ,CAACD,aAAa,CAAC;EAChD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIV,OAAO,CAACI,SAAS,CAACQ,uBAAuB,GAAG,YAAY;IACpD,IAAIN,EAAE,GAAG,IAAI,CAACC,KAAK;MAAEC,UAAU,GAAGF,EAAE,CAACE,UAAU;MAAEE,aAAa,GAAGJ,EAAE,CAACI,aAAa;IACjF,IAAIb,cAAc,CAACW,UAAU,CAAC,EAAE;MAC5BA,UAAU,CAACK,UAAU,EAAE;IAC3B,CAAC,MACI;MACDH,aAAa,CAACI,mBAAmB,EAAE;MACnCN,UAAU,CAACO,GAAG,CAACL,aAAa,CAAC;IACjC;IACA,OAAO,IAAI;EACf,CAAC;EACDV,OAAO,CAACI,SAAS,CAACY,kBAAkB,GAAG,YAAY;IAC/C,IAAIV,EAAE,GAAG,IAAI,CAACC,KAAK;MAAEC,UAAU,GAAGF,EAAE,CAACE,UAAU;MAAEE,aAAa,GAAGJ,EAAE,CAACI,aAAa;IACjF,IAAI,CAACb,cAAc,CAACW,UAAU,CAAC,EAC3BA,UAAU,CAACS,KAAK,EAAE;IACtB;AACR;AACA;AACA;IACQP,aAAa,CAACQ,sBAAsB,EAAE;EAC1C,CAAC;EACDlB,OAAO,CAACI,SAAS,CAACe,MAAM,GAAG,YAAY;IACnC,OAAO,IAAI;EACf,CAAC;EACD,OAAOnB,OAAO;AAClB,CAAC,CAACP,KAAK,CAAC2B,SAAS,CAAE;AACnB,SAASC,sBAAsB,CAACd,KAAK,EAAE;EACnC,IAAIC,UAAU,GAAGd,UAAU,CAACI,mBAAmB,CAAC;EAChD,IAAIW,gBAAgB,GAAGf,UAAU,CAACK,uBAAuB,CAAC;EAC1D,OAAQN,KAAK,CAAC6B,aAAa,CAACtB,OAAO,EAAEJ,QAAQ,CAAC,CAAC,CAAC,EAAEW,KAAK,EAAE;IAAEC,UAAU,EAAEA,UAAU;IAAEC,gBAAgB,EAAEA;EAAiB,CAAC,CAAC,CAAC;AAC7H;AACA,IAAIc,aAAa,GAAG;EAChBC,GAAG,EAAE,gBAAgB;EACrBC,YAAY,EAAE,UAAUlB,KAAK,EAAE;IAC3B,OAAO,CAAC,CAACA,KAAK,CAACmB,IAAI,IAAI,CAAC,CAACnB,KAAK,CAACoB,MAAM,IAAIpB,KAAK,CAACqB,QAAQ,KAAKC,SAAS;EACzE,CAAC;EACDC,YAAY,EAAE,YAAY;IAAE,OAAOT,sBAAsB;EAAE;AAC/D,CAAC;AAED,SAASE,aAAa"},"metadata":{},"sourceType":"module"}