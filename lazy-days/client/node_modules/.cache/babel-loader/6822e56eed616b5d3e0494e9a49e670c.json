{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { axiosInstance } from '../axiosInstance';\nimport { useCustomToast } from '../components/app/hooks/useCustomToast';\nimport { useUser } from '../components/user/hooks/useUser';\nexport function useAuth() {\n  _s();\n  const SERVER_ERROR = 'There was an error contacting the server.';\n  const toast = useCustomToast();\n  const {\n    clearUser,\n    updateUser\n  } = useUser();\n  async function authServerCall(urlEndpoint, email, password) {\n    try {\n      const {\n        data,\n        status\n      } = await axiosInstance({\n        url: urlEndpoint,\n        method: 'POST',\n        data: {\n          email,\n          password\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (status === 400) {\n        const title = 'message' in data ? data.message : 'Unauthorized';\n        toast({\n          title,\n          status: 'warning'\n        });\n        return;\n      }\n      if ('user' in data && 'token' in data.user) {\n        toast({\n          title: `Logged in as ${data.user.email}`,\n          status: 'info'\n        });\n\n        // update stored user data\n        updateUser(data.user);\n      }\n    } catch (errorResponse) {\n      var _errorResponse$respon, _errorResponse$respon2, _errorResponse$respon3, _errorResponse$respon4;\n      const title = axios.isAxiosError(errorResponse) && errorResponse !== null && errorResponse !== void 0 && (_errorResponse$respon = errorResponse.response) !== null && _errorResponse$respon !== void 0 && (_errorResponse$respon2 = _errorResponse$respon.data) !== null && _errorResponse$respon2 !== void 0 && _errorResponse$respon2.message ? errorResponse === null || errorResponse === void 0 ? void 0 : (_errorResponse$respon3 = errorResponse.response) === null || _errorResponse$respon3 === void 0 ? void 0 : (_errorResponse$respon4 = _errorResponse$respon3.data) === null || _errorResponse$respon4 === void 0 ? void 0 : _errorResponse$respon4.message : SERVER_ERROR;\n      toast({\n        title,\n        status: 'error'\n      });\n    }\n  }\n  async function signin(email, password) {\n    authServerCall('/signin', email, password);\n  }\n  async function signup(email, password) {\n    authServerCall('/user', email, password);\n  }\n  function signout() {\n    // clear user from stored user data\n    clearUser();\n    toast({\n      title: 'Logged out!',\n      status: 'info'\n    });\n  }\n\n  // Return the user object and auth methods\n  return {\n    signin,\n    signup,\n    signout\n  };\n}\n_s(useAuth, \"YkGiRRmMhuSlt1ZJ0zFyP+/aqIw=\", false, function () {\n  return [useCustomToast, useUser];\n});","map":{"version":3,"names":["axios","axiosInstance","useCustomToast","useUser","useAuth","SERVER_ERROR","toast","clearUser","updateUser","authServerCall","urlEndpoint","email","password","data","status","url","method","headers","title","message","user","errorResponse","isAxiosError","response","signin","signup","signout"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/src/auth/useAuth.tsx"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\nimport { User } from '../../../shared/types';\nimport { axiosInstance } from '../axiosInstance';\nimport { useCustomToast } from '../components/app/hooks/useCustomToast';\nimport { useUser } from '../components/user/hooks/useUser';\n\ninterface UseAuth {\n  signin: (email: string, password: string) => Promise<void>;\n  signup: (email: string, password: string) => Promise<void>;\n  signout: () => void;\n}\n\ntype UserResponse = { user: User };\ntype ErrorResponse = { message: string };\ntype AuthResponseType = UserResponse | ErrorResponse;\n\nexport function useAuth(): UseAuth {\n  const SERVER_ERROR = 'There was an error contacting the server.';\n  const toast = useCustomToast();\n  const { clearUser, updateUser } = useUser();\n\n  async function authServerCall(\n    urlEndpoint: string,\n    email: string,\n    password: string,\n  ): Promise<void> {\n    try {\n      const { data, status }: AxiosResponse<AuthResponseType> =\n        await axiosInstance({\n          url: urlEndpoint,\n          method: 'POST',\n          data: { email, password },\n          headers: { 'Content-Type': 'application/json' },\n        });\n\n      if (status === 400) {\n        const title = 'message' in data ? data.message : 'Unauthorized';\n        toast({ title, status: 'warning' });\n        return;\n      }\n\n      if ('user' in data && 'token' in data.user) {\n        toast({\n          title: `Logged in as ${data.user.email}`,\n          status: 'info',\n        });\n\n        // update stored user data\n        updateUser(data.user);\n      }\n    } catch (errorResponse) {\n      const title =\n        axios.isAxiosError(errorResponse) &&\n        errorResponse?.response?.data?.message\n          ? errorResponse?.response?.data?.message\n          : SERVER_ERROR;\n      toast({\n        title,\n        status: 'error',\n      });\n    }\n  }\n\n  async function signin(email: string, password: string): Promise<void> {\n    authServerCall('/signin', email, password);\n  }\n  async function signup(email: string, password: string): Promise<void> {\n    authServerCall('/user', email, password);\n  }\n\n  function signout(): void {\n    // clear user from stored user data\n    clearUser();\n    toast({\n      title: 'Logged out!',\n      status: 'info',\n    });\n  }\n\n  // Return the user object and auth methods\n  return {\n    signin,\n    signup,\n    signout,\n  };\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAyB,OAAO;AAG5C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,cAAc,QAAQ,wCAAwC;AACvE,SAASC,OAAO,QAAQ,kCAAkC;AAY1D,OAAO,SAASC,OAAO,GAAY;EAAA;EACjC,MAAMC,YAAY,GAAG,2CAA2C;EAChE,MAAMC,KAAK,GAAGJ,cAAc,EAAE;EAC9B,MAAM;IAAEK,SAAS;IAAEC;EAAW,CAAC,GAAGL,OAAO,EAAE;EAE3C,eAAeM,cAAc,CAC3BC,WAAmB,EACnBC,KAAa,EACbC,QAAgB,EACD;IACf,IAAI;MACF,MAAM;QAAEC,IAAI;QAAEC;MAAwC,CAAC,GACrD,MAAMb,aAAa,CAAC;QAClBc,GAAG,EAAEL,WAAW;QAChBM,MAAM,EAAE,MAAM;QACdH,IAAI,EAAE;UAAEF,KAAK;UAAEC;QAAS,CAAC;QACzBK,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MAEJ,IAAIH,MAAM,KAAK,GAAG,EAAE;QAClB,MAAMI,KAAK,GAAG,SAAS,IAAIL,IAAI,GAAGA,IAAI,CAACM,OAAO,GAAG,cAAc;QAC/Db,KAAK,CAAC;UAAEY,KAAK;UAAEJ,MAAM,EAAE;QAAU,CAAC,CAAC;QACnC;MACF;MAEA,IAAI,MAAM,IAAID,IAAI,IAAI,OAAO,IAAIA,IAAI,CAACO,IAAI,EAAE;QAC1Cd,KAAK,CAAC;UACJY,KAAK,EAAG,gBAAeL,IAAI,CAACO,IAAI,CAACT,KAAM,EAAC;UACxCG,MAAM,EAAE;QACV,CAAC,CAAC;;QAEF;QACAN,UAAU,CAACK,IAAI,CAACO,IAAI,CAAC;MACvB;IACF,CAAC,CAAC,OAAOC,aAAa,EAAE;MAAA;MACtB,MAAMH,KAAK,GACTlB,KAAK,CAACsB,YAAY,CAACD,aAAa,CAAC,IACjCA,aAAa,aAAbA,aAAa,wCAAbA,aAAa,CAAEE,QAAQ,4EAAvB,sBAAyBV,IAAI,mDAA7B,uBAA+BM,OAAO,GAClCE,aAAa,aAAbA,aAAa,iDAAbA,aAAa,CAAEE,QAAQ,qFAAvB,uBAAyBV,IAAI,2DAA7B,uBAA+BM,OAAO,GACtCd,YAAY;MAClBC,KAAK,CAAC;QACJY,KAAK;QACLJ,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;EACF;EAEA,eAAeU,MAAM,CAACb,KAAa,EAAEC,QAAgB,EAAiB;IACpEH,cAAc,CAAC,SAAS,EAAEE,KAAK,EAAEC,QAAQ,CAAC;EAC5C;EACA,eAAea,MAAM,CAACd,KAAa,EAAEC,QAAgB,EAAiB;IACpEH,cAAc,CAAC,OAAO,EAAEE,KAAK,EAAEC,QAAQ,CAAC;EAC1C;EAEA,SAASc,OAAO,GAAS;IACvB;IACAnB,SAAS,EAAE;IACXD,KAAK,CAAC;MACJY,KAAK,EAAE,aAAa;MACpBJ,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,OAAO;IACLU,MAAM;IACNC,MAAM;IACNC;EACF,CAAC;AACH;AAAC,GArEetB,OAAO;EAAA,QAEPF,cAAc,EACMC,OAAO;AAAA"},"metadata":{},"sourceType":"module"}