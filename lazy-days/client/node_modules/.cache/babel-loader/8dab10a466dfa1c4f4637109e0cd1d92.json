{"ast":null,"code":"import { getValueAsType, getDefaultValueType } from '../../dom/utils/value-types.js';\nimport { valueScaleCorrection } from '../../dom/projection/scale-correction.js';\nimport { isTransformProp, isTransformOriginProp } from './transform.js';\nimport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, buildTransform, buildTransformOrigin } from './build-transform.js';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.js';\nfunction buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate) {\n  var _a;\n  var style = state.style,\n    vars = state.vars,\n    transform = state.transform,\n    transformKeys = state.transformKeys,\n    transformOrigin = state.transformOrigin;\n  // Empty the transformKeys array. As we're throwing out refs to its items\n  // this might not be as cheap as suspected. Maybe using the array as a buffer\n  // with a manual incrementation would be better.\n  transformKeys.length = 0;\n  // Track whether we encounter any transform or transformOrigin values.\n  var hasTransform = false;\n  var hasTransformOrigin = false;\n  // Does the calculated transform essentially equal \"none\"?\n  var transformIsNone = true;\n  /**\n   * Loop over all our latest animated values and decide whether to handle them\n   * as a style or CSS variable.\n   *\n   * Transforms and transform origins are kept seperately for further processing.\n   */\n  for (var key in latestValues) {\n    var value = latestValues[key];\n    /**\n     * If this is a CSS variable we don't do any further processing.\n     */\n    if (isCSSVariable(key)) {\n      vars[key] = value;\n      continue;\n    }\n    // Convert the value to its default value type, ie 0 -> \"0px\"\n    var valueType = getDefaultValueType(key);\n    var valueAsType = getValueAsType(value, valueType);\n    if (isTransformProp(key)) {\n      // If this is a transform, flag to enable further transform processing\n      hasTransform = true;\n      transform[key] = valueAsType;\n      transformKeys.push(key);\n      // If we already know we have a non-default transform, early return\n      if (!transformIsNone) continue;\n      // Otherwise check to see if this is a default transform\n      if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0)) transformIsNone = false;\n    } else if (isTransformOriginProp(key)) {\n      transformOrigin[key] = valueAsType;\n      // If this is a transform origin, flag and enable further transform-origin processing\n      hasTransformOrigin = true;\n    } else {\n      /**\n       * If layout projection is on, and we need to perform scale correction for this\n       * value type, perform it.\n       */\n      if (layoutState && projection && layoutState.isHydrated && valueScaleCorrection[key]) {\n        var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);\n        /**\n         * Scale-correctable values can define a number of other values to break\n         * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc\n         */\n        var applyTo = valueScaleCorrection[key].applyTo;\n        if (applyTo) {\n          var num = applyTo.length;\n          for (var i = 0; i < num; i++) {\n            style[applyTo[i]] = correctedValue;\n          }\n        } else {\n          style[key] = correctedValue;\n        }\n      } else {\n        style[key] = valueAsType;\n      }\n    }\n  }\n  if (layoutState && projection && projection.isEnabled && layoutState.isHydrated) {\n    style.transform = buildLayoutProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);\n    if (transformTemplate) {\n      style.transform = transformTemplate(transform, style.transform);\n    }\n    style.transformOrigin = buildLayoutProjectionTransformOrigin(layoutState);\n  } else {\n    if (hasTransform) {\n      style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n    }\n    if (hasTransformOrigin) {\n      style.transformOrigin = buildTransformOrigin(transformOrigin);\n    }\n  }\n}\nexport { buildHTMLStyles };","map":{"version":3,"names":["getValueAsType","getDefaultValueType","valueScaleCorrection","isTransformProp","isTransformOriginProp","buildLayoutProjectionTransform","buildLayoutProjectionTransformOrigin","buildTransform","buildTransformOrigin","isCSSVariable","buildHTMLStyles","state","latestValues","projection","layoutState","options","transformTemplate","_a","style","vars","transform","transformKeys","transformOrigin","length","hasTransform","hasTransformOrigin","transformIsNone","key","value","valueType","valueAsType","push","default","isHydrated","correctedValue","process","applyTo","num","i","isEnabled","deltaFinal","treeScale","undefined"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/framer-motion/dist/es/render/html/utils/build-styles.js"],"sourcesContent":["import { getValueAsType, getDefaultValueType } from '../../dom/utils/value-types.js';\nimport { valueScaleCorrection } from '../../dom/projection/scale-correction.js';\nimport { isTransformProp, isTransformOriginProp } from './transform.js';\nimport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, buildTransform, buildTransformOrigin } from './build-transform.js';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.js';\n\nfunction buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate) {\n    var _a;\n    var style = state.style, vars = state.vars, transform = state.transform, transformKeys = state.transformKeys, transformOrigin = state.transformOrigin;\n    // Empty the transformKeys array. As we're throwing out refs to its items\n    // this might not be as cheap as suspected. Maybe using the array as a buffer\n    // with a manual incrementation would be better.\n    transformKeys.length = 0;\n    // Track whether we encounter any transform or transformOrigin values.\n    var hasTransform = false;\n    var hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    var transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (var key in latestValues) {\n        var value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariable(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        var valueType = getDefaultValueType(key);\n        var valueAsType = getValueAsType(value, valueType);\n        if (isTransformProp(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            transformKeys.push(key);\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))\n                transformIsNone = false;\n        }\n        else if (isTransformOriginProp(key)) {\n            transformOrigin[key] = valueAsType;\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n        }\n        else {\n            /**\n             * If layout projection is on, and we need to perform scale correction for this\n             * value type, perform it.\n             */\n            if (layoutState &&\n                projection &&\n                layoutState.isHydrated &&\n                valueScaleCorrection[key]) {\n                var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);\n                /**\n                 * Scale-correctable values can define a number of other values to break\n                 * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc\n                 */\n                var applyTo = valueScaleCorrection[key].applyTo;\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for (var i = 0; i < num; i++) {\n                        style[applyTo[i]] = correctedValue;\n                    }\n                }\n                else {\n                    style[key] = correctedValue;\n                }\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (layoutState &&\n        projection &&\n        projection.isEnabled &&\n        layoutState.isHydrated) {\n        style.transform = buildLayoutProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);\n        if (transformTemplate) {\n            style.transform = transformTemplate(transform, style.transform);\n        }\n        style.transformOrigin = buildLayoutProjectionTransformOrigin(layoutState);\n    }\n    else {\n        if (hasTransform) {\n            style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n        }\n        if (hasTransformOrigin) {\n            style.transformOrigin = buildTransformOrigin(transformOrigin);\n        }\n    }\n}\n\nexport { buildHTMLStyles };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}