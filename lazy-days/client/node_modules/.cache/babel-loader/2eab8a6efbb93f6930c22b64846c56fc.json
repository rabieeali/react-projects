{"ast":null,"code":"import { QueryClient } from 'react-query';\nimport { createStandaloneToast } from '@chakra-ui/react';\nimport { theme } from '../theme';\nconst toast = createStandaloneToast({\n  theme\n});\nfunction queryErrorHandler(error) {\n  // error is type unknown because in js, anything can be an error (e.g. throw(5))\n  const title = error instanceof Error ? error.message : 'error connecting to server';\n\n  // prevent duplicate toasts\n  toast.closeAll();\n  toast({\n    title,\n    status: 'error',\n    variant: 'subtle',\n    isClosable: true\n  }); // have to add more options on standAlone toasts\n}\n\n// to satisfy typescript until this file has uncommented contents\n// we can also use error boundary as an alternative!\n// it has a hook named useErrorBoundary , you really should read more about it!\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      onError: queryErrorHandler // we are using default error handler, we do not have to worry about adding error handling to each query! unless we want to override the default!\n    }\n  }\n});","map":{"version":3,"names":["QueryClient","createStandaloneToast","theme","toast","queryErrorHandler","error","title","Error","message","closeAll","status","variant","isClosable","queryClient","defaultOptions","queries","onError"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/src/react-query/queryClient.ts"],"sourcesContent":["import { QueryClient } from 'react-query';\n\nimport { createStandaloneToast } from '@chakra-ui/react';\nimport { theme } from '../theme';\n\nconst toast = createStandaloneToast({ theme });\n\nfunction queryErrorHandler(error: unknown): void {\n    // error is type unknown because in js, anything can be an error (e.g. throw(5))\n    const title =\n        error instanceof Error ? error.message : 'error connecting to server';\n\n    // prevent duplicate toasts\n    toast.closeAll();\n    toast({ title, status: 'error', variant: 'subtle', isClosable: true }); // have to add more options on standAlone toasts\n}\n\n// to satisfy typescript until this file has uncommented contents\n// we can also use error boundary as an alternative!\n// it has a hook named useErrorBoundary , you really should read more about it!\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            onError: queryErrorHandler // we are using default error handler, we do not have to worry about adding error handling to each query! unless we want to override the default!\n        }\n    }\n});\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,aAAa;AAEzC,SAASC,qBAAqB,QAAQ,kBAAkB;AACxD,SAASC,KAAK,QAAQ,UAAU;AAEhC,MAAMC,KAAK,GAAGF,qBAAqB,CAAC;EAAEC;AAAM,CAAC,CAAC;AAE9C,SAASE,iBAAiB,CAACC,KAAc,EAAQ;EAC7C;EACA,MAAMC,KAAK,GACPD,KAAK,YAAYE,KAAK,GAAGF,KAAK,CAACG,OAAO,GAAG,4BAA4B;;EAEzE;EACAL,KAAK,CAACM,QAAQ,EAAE;EAChBN,KAAK,CAAC;IAAEG,KAAK;IAAEI,MAAM,EAAE,OAAO;IAAEC,OAAO,EAAE,QAAQ;IAAEC,UAAU,EAAE;EAAK,CAAC,CAAC,CAAC,CAAC;AAC5E;;AAEA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,IAAIb,WAAW,CAAC;EACvCc,cAAc,EAAE;IACZC,OAAO,EAAE;MACLC,OAAO,EAAEZ,iBAAiB,CAAC;IAC/B;EACJ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}