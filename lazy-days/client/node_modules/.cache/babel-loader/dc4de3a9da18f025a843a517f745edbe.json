{"ast":null,"code":"import { Presence } from '../types.js';\n\n/**\n * Default handlers for batching VisualElements\n */\nvar defaultHandler = {\n  measureLayout: function (child) {\n    return child.updateLayoutMeasurement();\n  },\n  layoutReady: function (child) {\n    return child.notifyLayoutReady();\n  }\n};\n/**\n * Create a batcher to process VisualElements\n */\nfunction createBatcher() {\n  var queue = new Set();\n  return {\n    add: function (child) {\n      return queue.add(child);\n    },\n    flush: function (_a) {\n      var _b = _a === void 0 ? defaultHandler : _a,\n        measureLayout = _b.measureLayout,\n        layoutReady = _b.layoutReady,\n        parent = _b.parent;\n      var order = Array.from(queue).sort(function (a, b) {\n        return a.depth - b.depth;\n      });\n      var resetAndMeasure = function () {\n        /**\n         * Write: Reset any transforms on children elements so we can read their actual layout\n         */\n        order.forEach(function (child) {\n          return child.resetTransform();\n        });\n        /**\n         * Read: Measure the actual layout\n         */\n        order.forEach(measureLayout);\n      };\n      parent ? parent.withoutTransform(resetAndMeasure) : resetAndMeasure();\n      /**\n       * Write: Notify the VisualElements they're ready for further write operations.\n       */\n      order.forEach(layoutReady);\n      /**\n       * After all children have started animating, ensure any Entering components are set to Present.\n       * If we add deferred animations (set up all animations and then start them in two loops) this\n       * could be moved to the start loop. But it needs to happen after all the animations configs\n       * are generated in AnimateSharedLayout as this relies on presence data\n       */\n      order.forEach(function (child) {\n        if (child.isPresent) child.presence = Presence.Present;\n      });\n      queue.clear();\n    }\n  };\n}\nexport { createBatcher };","map":{"version":3,"names":["Presence","defaultHandler","measureLayout","child","updateLayoutMeasurement","layoutReady","notifyLayoutReady","createBatcher","queue","Set","add","flush","_a","_b","parent","order","Array","from","sort","a","b","depth","resetAndMeasure","forEach","resetTransform","withoutTransform","isPresent","presence","Present","clear"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/batcher.js"],"sourcesContent":["import { Presence } from '../types.js';\n\n/**\n * Default handlers for batching VisualElements\n */\nvar defaultHandler = {\n    measureLayout: function (child) { return child.updateLayoutMeasurement(); },\n    layoutReady: function (child) { return child.notifyLayoutReady(); },\n};\n/**\n * Create a batcher to process VisualElements\n */\nfunction createBatcher() {\n    var queue = new Set();\n    return {\n        add: function (child) { return queue.add(child); },\n        flush: function (_a) {\n            var _b = _a === void 0 ? defaultHandler : _a, measureLayout = _b.measureLayout, layoutReady = _b.layoutReady, parent = _b.parent;\n            var order = Array.from(queue).sort(function (a, b) { return a.depth - b.depth; });\n            var resetAndMeasure = function () {\n                /**\n                 * Write: Reset any transforms on children elements so we can read their actual layout\n                 */\n                order.forEach(function (child) { return child.resetTransform(); });\n                /**\n                 * Read: Measure the actual layout\n                 */\n                order.forEach(measureLayout);\n            };\n            parent\n                ? parent.withoutTransform(resetAndMeasure)\n                : resetAndMeasure();\n            /**\n             * Write: Notify the VisualElements they're ready for further write operations.\n             */\n            order.forEach(layoutReady);\n            /**\n             * After all children have started animating, ensure any Entering components are set to Present.\n             * If we add deferred animations (set up all animations and then start them in two loops) this\n             * could be moved to the start loop. But it needs to happen after all the animations configs\n             * are generated in AnimateSharedLayout as this relies on presence data\n             */\n            order.forEach(function (child) {\n                if (child.isPresent)\n                    child.presence = Presence.Present;\n            });\n            queue.clear();\n        },\n    };\n}\n\nexport { createBatcher };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,aAAa;;AAEtC;AACA;AACA;AACA,IAAIC,cAAc,GAAG;EACjBC,aAAa,EAAE,UAAUC,KAAK,EAAE;IAAE,OAAOA,KAAK,CAACC,uBAAuB,EAAE;EAAE,CAAC;EAC3EC,WAAW,EAAE,UAAUF,KAAK,EAAE;IAAE,OAAOA,KAAK,CAACG,iBAAiB,EAAE;EAAE;AACtE,CAAC;AACD;AACA;AACA;AACA,SAASC,aAAa,GAAG;EACrB,IAAIC,KAAK,GAAG,IAAIC,GAAG,EAAE;EACrB,OAAO;IACHC,GAAG,EAAE,UAAUP,KAAK,EAAE;MAAE,OAAOK,KAAK,CAACE,GAAG,CAACP,KAAK,CAAC;IAAE,CAAC;IAClDQ,KAAK,EAAE,UAAUC,EAAE,EAAE;MACjB,IAAIC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGX,cAAc,GAAGW,EAAE;QAAEV,aAAa,GAAGW,EAAE,CAACX,aAAa;QAAEG,WAAW,GAAGQ,EAAE,CAACR,WAAW;QAAES,MAAM,GAAGD,EAAE,CAACC,MAAM;MAChI,IAAIC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACT,KAAK,CAAC,CAACU,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;QAAE,OAAOD,CAAC,CAACE,KAAK,GAAGD,CAAC,CAACC,KAAK;MAAE,CAAC,CAAC;MACjF,IAAIC,eAAe,GAAG,YAAY;QAC9B;AAChB;AACA;QACgBP,KAAK,CAACQ,OAAO,CAAC,UAAUpB,KAAK,EAAE;UAAE,OAAOA,KAAK,CAACqB,cAAc,EAAE;QAAE,CAAC,CAAC;QAClE;AAChB;AACA;QACgBT,KAAK,CAACQ,OAAO,CAACrB,aAAa,CAAC;MAChC,CAAC;MACDY,MAAM,GACAA,MAAM,CAACW,gBAAgB,CAACH,eAAe,CAAC,GACxCA,eAAe,EAAE;MACvB;AACZ;AACA;MACYP,KAAK,CAACQ,OAAO,CAAClB,WAAW,CAAC;MAC1B;AACZ;AACA;AACA;AACA;AACA;MACYU,KAAK,CAACQ,OAAO,CAAC,UAAUpB,KAAK,EAAE;QAC3B,IAAIA,KAAK,CAACuB,SAAS,EACfvB,KAAK,CAACwB,QAAQ,GAAG3B,QAAQ,CAAC4B,OAAO;MACzC,CAAC,CAAC;MACFpB,KAAK,CAACqB,KAAK,EAAE;IACjB;EACJ,CAAC;AACL;AAEA,SAAStB,aAAa"},"metadata":{},"sourceType":"module"}