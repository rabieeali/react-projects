{"ast":null,"code":"import sync from 'framesync';\nimport { useMotionValue } from './use-motion-value.js';\nimport { useMultiOnChange } from './use-on-change.js';\nfunction useCombineMotionValues(values, combineValues) {\n  /**\n   * Initialise the returned motion value. This remains the same between renders.\n   */\n  var value = useMotionValue(combineValues());\n  /**\n   * Create a function that will update the template motion value with the latest values.\n   * This is pre-bound so whenever a motion value updates it can schedule its\n   * execution in Framesync. If it's already been scheduled it won't be fired twice\n   * in a single frame.\n   */\n  var updateValue = function () {\n    return value.set(combineValues());\n  };\n  /**\n   * Synchronously update the motion value with the latest values during the render.\n   * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n   */\n  updateValue();\n  /**\n   * Subscribe to all motion values found within the template. Whenever any of them change,\n   * schedule an update.\n   */\n  useMultiOnChange(values, function () {\n    return sync.update(updateValue, false, true);\n  });\n  return value;\n}\nexport { useCombineMotionValues };","map":{"version":3,"names":["sync","useMotionValue","useMultiOnChange","useCombineMotionValues","values","combineValues","value","updateValue","set","update"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/node_modules/framer-motion/dist/es/value/use-combine-values.js"],"sourcesContent":["import sync from 'framesync';\nimport { useMotionValue } from './use-motion-value.js';\nimport { useMultiOnChange } from './use-on-change.js';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    var value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    var updateValue = function () { return value.set(combineValues()); };\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useMultiOnChange(values, function () { return sync.update(updateValue, false, true); });\n    return value;\n}\n\nexport { useCombineMotionValues };\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAC5B,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,SAASC,sBAAsB,CAACC,MAAM,EAAEC,aAAa,EAAE;EACnD;AACJ;AACA;EACI,IAAIC,KAAK,GAAGL,cAAc,CAACI,aAAa,EAAE,CAAC;EAC3C;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIE,WAAW,GAAG,YAAY;IAAE,OAAOD,KAAK,CAACE,GAAG,CAACH,aAAa,EAAE,CAAC;EAAE,CAAC;EACpE;AACJ;AACA;AACA;EACIE,WAAW,EAAE;EACb;AACJ;AACA;AACA;EACIL,gBAAgB,CAACE,MAAM,EAAE,YAAY;IAAE,OAAOJ,IAAI,CAACS,MAAM,CAACF,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC;EAAE,CAAC,CAAC;EACvF,OAAOD,KAAK;AAChB;AAEA,SAASH,sBAAsB"},"metadata":{},"sourceType":"module"}