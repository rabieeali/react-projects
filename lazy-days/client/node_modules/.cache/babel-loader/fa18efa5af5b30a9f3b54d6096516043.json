{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useToast } from '@chakra-ui/react';\n\n// for when we need a query function for useQuery\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\nexport function useTreatments() {\n  _s();\n  const toast = useToast();\n  const fallback = []; // loading indicator fallback we also added a useIfetching hook in Loading component to centeralize\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments, {\n    onError: error => {\n      const title = error instanceof Error ? error.toString().replace(/^Error:\\s*/, '') : 'error connecting to the server';\n    }\n  });\n  return data;\n}\n_s(useTreatments, \"Mddo5ahGsChMwVhDg8eahKg0HpI=\", false, function () {\n  return [useToast, useQuery];\n});","map":{"version":3,"names":["useQuery","axiosInstance","queryKeys","useToast","getTreatments","data","get","useTreatments","toast","fallback","treatments","onError","error","title","Error","toString","replace"],"sources":["/home/pc/Desktop/react-projects/react-projects/lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"sourcesContent":["import { useQuery } from 'react-query';\nimport type { Treatment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useToast } from '@chakra-ui/react';\n\n// for when we need a query function for useQuery\nasync function getTreatments(): Promise<Treatment[]> {\n  const { data } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments(): Treatment[] {\n  const toast = useToast();\n  const fallback = []; // loading indicator fallback we also added a useIfetching hook in Loading component to centeralize\n  const { data = fallback } = useQuery(queryKeys.treatments, getTreatments, {\n    onError: (error) => {\n      const title = error instanceof Error\n        ? error.toString().replace(/^Error:\\s*/, '')\n        : 'error connecting to the server';\n    }\n  });\n\n  return data;\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,SAAS,QAAQ,gCAAgC;AAE1D,SAASC,QAAQ,QAAQ,kBAAkB;;AAE3C;AACA,eAAeC,aAAa,GAAyB;EACnD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMJ,aAAa,CAACK,GAAG,CAAC,aAAa,CAAC;EACvD,OAAOD,IAAI;AACb;AAEA,OAAO,SAASE,aAAa,GAAgB;EAAA;EAC3C,MAAMC,KAAK,GAAGL,QAAQ,EAAE;EACxB,MAAMM,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAM;IAAEJ,IAAI,GAAGI;EAAS,CAAC,GAAGT,QAAQ,CAACE,SAAS,CAACQ,UAAU,EAAEN,aAAa,EAAE;IACxEO,OAAO,EAAGC,KAAK,IAAK;MAClB,MAAMC,KAAK,GAAGD,KAAK,YAAYE,KAAK,GAChCF,KAAK,CAACG,QAAQ,EAAE,CAACC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,GAC1C,gCAAgC;IACtC;EACF,CAAC,CAAC;EAEF,OAAOX,IAAI;AACb;AAAC,GAZeE,aAAa;EAAA,QACbJ,QAAQ,EAEMH,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}